@inherits BaseComponent
@inject IJSRuntime JS

@namespace FluentCMS.Web.UI.Components

@if(Visible)
{
    <div @attributes="AdditionalAttributes"
         @ref="Element"
         class="@this.GetClasses()">
        <h2 class="@this.ClassName("AccordionHeader")">
            <button class="@this.ClassName("AccordionToggler")"
                    disabled="@Disabled"
                    type="button">
                <span>
                    @Summary
                </span>
                @if (Open)
                {
                    <Icon Name="IconName.AngleDown"
                          Size="IconSize.Large" />
                }
                else
                {
                    <Icon Name="IconName.AngleUp"
                          Size="IconSize.Large" />
                }
            </button>
        </h2>
        <div class="hidden @this.ClassName(" AccordionBody")">
            <div class="@this.ClassName("AccordionContent")">
                @ChildContent
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [CSSProperty]
    public bool Disabled { get; set; }

    [Parameter]
    public string Summary { get; set; } = string.Empty;

    private bool open;

    [Parameter]
    public bool Open
    {
        get
        {
            return open;
        }
        set
        {
            if (value == open) return;

            open = value;

            Module.InvokeVoidAsync(open ? "open" : "close", DotNetObjectReference.Create(this), Element);
        }
    }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    public ElementReference Element;

    public IJSObjectReference Module = default!;

    [JSInvokable]
    public async void Update(bool open)
    {
        await OpenChanged.InvokeAsync(Open = open);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Module = await JS.InvokeAsync<IJSObjectReference>("import", "/_content/FluentCMS.Web.UI.Components/Components/Accordion/Accordion.razor.js");

        await Module.InvokeVoidAsync("initialize", DotNetObjectReference.Create(this), Element);
    }
}
