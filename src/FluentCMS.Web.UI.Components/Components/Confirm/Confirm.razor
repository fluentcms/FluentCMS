@inherits BaseComponent
@inject IJSRuntime JS

@namespace FluentCMS.Web.UI.Components

<div @attributes="AdditionalAttributes"
     @ref="element"
     class="@this.GetClasses()"
     tabindex="-1">
    <div class="@this.ClassName("ConfirmWrapper")">
        <div class="@this.ClassName("ConfirmContent")">
            <CloseButton OnClick="Close" />
            <div class="@this.ClassName("ConfirmBody")">
                <Icon Name="IconName.ExclamationCircle"
                      Size="IconSize.Large" />
                <h3 class="@this.ClassName("ConfirmMessage")">
                    @Message
                </h3>
                <ButtonGroup>
                    <Button Color="Color.Danger"
                            OnClick="Confirmation">
                        Yes, I'm sure
                    </Button>
                    <Button OnClick="Close">
                        No, cancel
                    </Button>
                </ButtonGroup>
            </div>
        </div>
    </div>
</div>

@code {
    public ElementReference element;

    private IJSObjectReference module = default!;

    [Parameter]
    public string? Message { get; set; }

    private bool open;

    [Parameter]
    [CssProperty]
    public bool Open
    {
        get
        {
            return open;
        }
        set
        {
            if (value == open) return;

            open = value;

            OpenChanged.InvokeAsync(Open);

            module.InvokeVoidAsync(open ? "open" : "close", DotNetObjectReference.Create(this), element);
        }
    }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    [CssProperty]
    public ModalSize Size { get; set; } = ModalSize.Medium;

    [Parameter]
    [CssProperty]
    public bool Static { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancel { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnConfirm { get; set; }

    [JSInvokable]
    public async void Close()
    {
        if (!Open) return;

        Open = false;

        await OnCancel.InvokeAsync();
    }

    public async void Confirmation()
    {
        if (!Open) return;

        Open = false;

        await OnConfirm.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        module = await JS.InvokeAsync<IJSObjectReference>("import", "/_content/FluentCMS.Web.UI.Components/Components/Confirm/Confirm.razor.js");

        await module.InvokeVoidAsync("initialize", DotNetObjectReference.Create(this), element, new { Static });
    }
}
