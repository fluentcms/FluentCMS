@* TODO *@

@implements IDisposable
@inherits FormElementsField

@namespace FluentCMS.Web.UI.Components

<div @attributes="AdditionalAttributes"
     class="@this.GetClasses()">
    @if (!IsInlineLabel && (!string.IsNullOrEmpty(Label) || LabelFragment != null))
    {
        <label for="@Id"
               class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            @if (!string.IsNullOrEmpty(Label))
            {
                @Label
            }
            else
            {
                @LabelFragment
            }
            @(Required ? "\u00A0*" : "")
        </label>
    }
    <div class="relative">
        @if (IconStart != null)
        {
            <div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
                <Icon Name="IconStart.GetValueOrDefault()" />
            </div>
        }
        @if (IsInlineLabel)
        {
            @if (Appearance == FormFieldAppearance.Switch)
            {

                <label class="relative inline-flex items-center cursor-pointer">
                    @ChildContent
                    <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">
                        @if (LabelFragment == null)
                        {
                            @Label
                        }
                        else
                        {
                            @LabelFragment
                        }
                        @(Required ? "\u00A0*" : "")
                    </span>
                </label>
            }
            else
            {
                @ChildContent
                @if (!string.IsNullOrEmpty(Label) || LabelFragment != null)
                {
                    <label for="@Id"
                           class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                        @if (!string.IsNullOrEmpty(Label))
                        {
                            @Label
                        }
                        else
                        {
                            @LabelFragment
                        }
                        @(Required ? "\u00A0*" : "")
                    </label>
                }
            }
        }
        else
        {
            @ChildContent
        }
        @if (IconEnd != null)
        {
            <div class="absolute inset-y-0 end-0 flex items-center pe-3.5 pointer-events-none">
                <Icon Name="IconEnd.GetValueOrDefault()" />
            </div>
        }
    </div>
    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
        @(Errors.FirstOrDefault() ?? Hint ?? "\u00A0")
    </p>
    @if (!Dense)
    {
        <Spacer />
    }
</div>

@code
{
    [CssProperty]
    public bool HasIconEnd { get => IconEnd != null; }

    [CssProperty]
    public bool HasIconStart { get => IconStart != null; }

    [CssProperty]
    public FormFieldState State { get; set; }

    [CascadingParameter]
    EditContext? Context { get; set; }

    bool IsInlineLabel
    {
        get => Appearance == FormFieldAppearance.Checkbox || Appearance == FormFieldAppearance.Radio || Appearance == FormFieldAppearance.Switch;
    }

    IEnumerable<string> Errors
    {
        get
        {
            if (Context == null || Identifier == null)
            {
                return new List<string> { };
            }

            return Context.GetValidationMessages(Identifier.GetValueOrDefault());
        }
    }

    FieldIdentifier? Identifier
    {
        get
        {
            if (Context == null || Name == null)
            {
                return null;
            }

            return Context.Field(Name);
        }
    }

    void OnValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        if (Context == null || Identifier == null) return;

        var IsValid = Context.IsValid(Identifier.GetValueOrDefault());

        State = IsValid ? FormFieldState.Valid : FormFieldState.Invalid;
    }

    public void Dispose()
    {
        if (Context == null) return;

        Context.OnValidationRequested -= OnValidationRequested;
    }

    protected override void OnInitialized()
    {
        if (Context == null) return;

        Context.OnValidationRequested += OnValidationRequested;
    }
}
