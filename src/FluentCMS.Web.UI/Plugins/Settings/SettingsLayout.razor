@inherits BaseComponent

<Grid>
    <GridItem HideSmall="true"
              HideMedium="true"
              Small="GridItemColumn.Auto">
        <Sidebar Secondary="true">
            <ChildContent>

                    <SidebarItem> Global Settings </SidebarItem>
                    <SidebarItem Href="/admin/settings"
                                 id="@($"settingsSidebarGeneralLink")">
                        General
                    </SidebarItem>
                    <SidebarItem Href="/admin/users"
                                 id="@($"settingsSidebarUsersLink")">
                        Users
                    </SidebarItem>
@* 
                    <SidebarItem Href="/admin/roles"
                                 id="@($"settingsSidebarRolesLink")">
                        Roles
                    </SidebarItem>
                    <SidebarItem Href="/admin/api-tokens"
                                 id="@($"settingsSidebarApiTokensLink")">
                        API Tokens
                    </SidebarItem> *@
            </ChildContent>
        </Sidebar>
    </GridItem>
    <GridItem Small="GridItemColumn.Grow">
        @ChildContent
    </GridItem>
</Grid>

@code {
    [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    ILocalStorageService LocalStorageService { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    string? AppSlug { get; set; }

    List<AppDetailResponse> Apps { get; set; } = [];

    List<ContentTypeDetailResponse> Collections { get; set; } = [];

    async Task Load()
    {
        var response = await ContentTypeClient.GetAllAsync(AppSlug);

        if (response?.Data == null) return;

        Collections = response.Data.ToList();
    }

    async Task OnChangeApp()
    {
        await Load();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        AppSlug = NavigationManager.GetAppSlugFromQuery();

        if (!string.IsNullOrEmpty(AppSlug))
        {
            await Load();
        }

        var response = await AppClient!.GetAllAsync();

        if (response?.Data == null) return;

        Apps = response.Data.ToList();

        StateHasChanged();

        if (!string.IsNullOrEmpty(AppSlug)) return;

        if (Apps.Count() == 0) return;

        var slug = await LocalStorageService.GetItemAsStringAsync("APP_SLUG");

        AppSlug = Apps.Exists(x => x.Slug == slug) ? slug : Apps.First().Slug;

        StateHasChanged();

        await LocalStorageService.SetItemAsStringAsync("APP_SLUG", AppSlug);

        await Load();
    }
}
