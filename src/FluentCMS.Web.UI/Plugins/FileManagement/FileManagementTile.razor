<Card class="group relative"
      Clickable="true"
      @onclick="() => OnEdit.InvokeAsync()">
    <CardBody>
        @if (hasPreview)
        {
            <img src="@Value.Url"
                 class="w-full object-contain h-[164px]" />
        }
        else
        {
            <Grid class="h-[164px]"
                  ItemsSmall="GridItems.Center"
                  JustifySmall="GridJustify.Center">
                <GridItem>
                    <Icon Color="Color.Secondary"
                          Name="IconName.File"
                          Size="IconSize.X2" />
                </GridItem>
            </Grid>
        }
        <div class="hidden group-hover:flex absolute top-3 right-3">
            <ButtonGroup>
                @if (Editable)
                {
                    <Button Color="Color.Default"
                            Outline="true"
                            Size="ButtonSize.Small"
                            StopPropagation="true"
                            OnClick="() => OnEdit.InvokeAsync()">
                        <Icon Name="IconName.Edit" />
                    </Button>
                }
                <Button Color="Color.Danger"
                        Outline="true"
                        Size="ButtonSize.Small"
                        StopPropagation="true"
                        OnClick="() => OnDelete.InvokeAsync()">
                    <Icon Name="IconName.Delete" />
                </Button>
            </ButtonGroup>
        </div>
        <hr />
        <Spacer />
        <Typography class="truncate"
                    Size="TextSize.Small"
                    Weight="TextWeight.Medium">
            @Value.Name
        </Typography>
        <Grid ItemsSmall="GridItems.Center"
              NoWrap="true">
            <GridItem Small="GridItemColumn.Grow">
                <Typography Color="Color.Secondary"
                            Size="TextSize.ExtraSmall">
                    @Value.Extension.ToUpper()
                </Typography>
            </GridItem>
            <GridItem Small="GridItemColumn.Auto">
                <Badge>
                    @Value.MimeType.Split('/').First().ToUpper()
                </Badge>
            </GridItem>
        </Grid>
    </CardBody>
</Card>

@code {
    [Parameter]
    public bool Editable { get; set; } = true;

    [Parameter]
    public FileDTO Value { get; set; } = default!;

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback OnEdit { get; set; }

    bool hasPreview
    {
        get
        {
            return Value.MimeType.StartsWith("image");
        }
    }
}
