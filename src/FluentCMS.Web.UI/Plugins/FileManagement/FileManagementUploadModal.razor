<Modal @bind-Open="Open"
       Size="ModalSize.Large">
    <ModalHeader>
        <ModalTitle>
            Add new assets
        </ModalTitle>
    </ModalHeader>
    <ModalBody>
        @if (selecting || files.Count == 0)
        {
            <Browse Multiple="true"
                    OnChange="OnChange"></Browse>
        }
        else
        {
            <Grid ItemsSmall="GridItems.Center"
                  JustifySmall="GridJustify.Between">
                <GridItem>
                    <Typography>
                        @(files.Count) files ready to upload
                    </Typography>
                    <Typography>
                        Manage the files before adding them to the file management
                    </Typography>
                </GridItem>
                <GridItem>
                    <Button Color="Color.Primary"
                            OnClick="() => selecting = true">
                        Add new files
                    </Button>
                </GridItem>
            </Grid>
            <Grid Gutter="GridGutter.Large">
                @foreach (var file in files)
                {
                    <GridItem @key="file.Id + file.Name"
                              Small="GridItemColumn.Twelve"
                              Medium="GridItemColumn.Six"
                              Large="GridItemColumn.Four">
                        <FileManagementTile Value="file"
                                            OnDelete="() => files.Remove(file)" />
                    </GridItem>
                }
            </Grid>
        }
    </ModalBody>
    <ModalFooter>
        <ButtonGroup>
            <Button OnClick="() => OnCancel.InvokeAsync()">
                Cancel
            </Button>
            @if (!selecting && files.Count != 0)
            {
                <Button Color="Color.Primary">
                    Upload
                </Button>
            }
        </ButtonGroup>
    </ModalFooter>
</Modal>

@code {
    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }

    bool selecting;

    List<FileDTO> files { get; set; } = new() { };

    void Upload()
    {

    }

    void OnChange(InputFileChangeEventArgs evt)
    {
        selecting = false;

        foreach (var file in evt.GetMultipleFiles())
        {
            files.Add(new()
                {
                    Name = file.Name,
                    MimeType = file.ContentType,
                    Extension = file.Name.Split('.').Last(),
                    Size = file.Size
                }
            );
        }
    }

    protected override void OnParametersSet()
    {
        if (!Open) return;

        selecting = false;

        files = new() { };
    }
}

