<div class="m-4">
    <Grid ItemsSmall="GridItems.Center" JustifySmall="GridJustify.Between">
        <GridItem>
            <Typography Size="TextSize.H5">File Management (Draft)</Typography>
        </GridItem>
        <GridItem>
            <Button Color="Color.Primary"
                    @onclick="OpenBrowseModal"
                    Size="ButtonSize.Small">
                <Icon Name="IconName.Plus" />
                Add New Files
            </Button>
        </GridItem>
    </Grid>
    <Typography>
        Files (@files.Count)
    </Typography>
    <Spacer />
    @if(files.Count > 0)
    {
        <Grid Gutter="GridGutter.Large">
            @foreach (var file in files)
            {
                <GridItem @key="file.Id"
                        Small="GridItemColumn.Twelve"
                        Medium="GridItemColumn.Four"
                        Large="GridItemColumn.Three">
                    <FileManagementTile Value="file"
                                        OnDelete="() => Delete(file)"
                                        OnEdit="() => Edit(file)" />
                </GridItem>
            }
        </Grid>
    } else {
        <EmptyState Icon="IconName.File"
                    Message="No Files Found!">
            <Button Color="Color.Primary"
                    @onclick="OpenBrowseModal"
                    Size="ButtonSize.Small">
                <Icon Name="IconName.Plus" />
                Add New Files
            </Button>
        </EmptyState>
    }
</div>

<FileManagementUploadModal Open="openBrowseModal"
                           OnSelect="OnSelectBrowseModal" />

<FileManagementEditModal Open="openEditModal"
                         Value="editing"
                         OnChange="OnChangeEditModal" />

@code {
    FileDTO editing = default!;

    List<FileDTO> files { get; set; } = new() { };

    bool openBrowseModal = false;

    bool openEditModal = false;

    async Task Delete(FileDTO file)
    {
        // var result = await Confirm.Show("Are you sure to remove this file?");

        // if (!result) return;

        // // TODO: Parsa
        // // await DELETE_SERVICE(file.Id);

        // files.Remove(file);
    }

    void Edit(FileDTO file)
    {
        editing = file;

        openEditModal = true;
    }

    void OpenBrowseModal()
    {
        openBrowseModal = true;
    }

    async Task OnChangeEditModal(FileDTO? file)
    {
        openEditModal = false;

        if (file == null) return;

        var index = files.FindIndex(x => x.Id == file.Id);

        // TODO: Parsa
        // file = await UPDATE_SERVICE(file);

        files[index] = file;
    }

    async Task OnSelectBrowseModal(List<FileDTO>? next)
    {
        openBrowseModal = false;

        if (next == null) return;

        // TODO: Parsa
        // next = await UPLOAD_SERVICE(next);

        files = files.Concat(next).ToList();
    }

    protected override Task OnInitializedAsync()
    {
        // TODO: Parsa
        // files = await LIST_SERVICE();

        files = new List<FileDTO>()
        {
            new FileDTO()
                {
                    Id = Guid.NewGuid(),
                    Name = "test",
                    Url = "https://flowbite.s3.amazonaws.com/blocks/application-ui/products/imac-front-image.png",
                    Extension = "png",
                    MimeType = "image/png",
                    Size = 123
                },
            new FileDTO()
                {
                    Id = Guid.NewGuid(),
                    Name = "test",
                    Extension = "png",
                    MimeType = "app/json",
                    Size = 123
                },
            new FileDTO()
                {
                    Id = Guid.NewGuid(),
                    Name = "test",
                    Url = "https://flowbite.s3.amazonaws.com/blocks/application-ui/products/imac-front-image.png",
                    Extension = "png",
                    MimeType = "image/png",
                    Size = 123
                }
        };

        return base.OnInitializedAsync();
    }
}
