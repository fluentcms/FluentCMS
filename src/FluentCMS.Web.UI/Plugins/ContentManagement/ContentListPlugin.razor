@using FluentCMS.Web.UI.Plugins.ContentManagement

<ContentLayout>
    <Page>
        <PageHeader Title="@PageTitle">
            <PageHeaderActions>
                <ButtonGroup>
                    <Button autofocus="true"
                            Color="Color.Primary"
                            Href="@NavigationManager.Plugin("Content Management", "Create Content", new { contentTypeSlug = ContentTypeSlug })"
                            id="contentCreateButton" Size="ButtonSize.Small">
                        <Icon Name="IconName.Plus" />
                        Insert
                    </Button>
                </ButtonGroup>
            </PageHeaderActions>

        </PageHeader>
        <PageBody>
            <Card>
                <ChildContent>

                    @if (ContentType != null && ContentType.Fields?.Count > 0)
                    {
                        <Table>
                            <TableHead>
                                @foreach (var field in Fields)
                                {
                                    <TableCell>
                                        @field.Title
                                    </TableCell>
                                }
                                <TableCell Width="TableColumnWidth.Small"></TableCell>
                            </TableHead>
                            <TableBody id="contentListTable">
                                @foreach (var item in Data)
                                {
                                    <TableRow>
                                        @foreach (var field in ContentType.Fields.ToList())
                                        {
                                            <TableCell>
                                                @(item.Value[field.Slug])
                                            </TableCell>
                                        }
                                        <TableCell>
                                            <ButtonGroup>
                                                <Button data-test="preview-btn"
                                                        Ghost="true"
                                                        Href="@NavigationManager.Plugin("Content Management", "Content Detail", new { contentTypeSlug = ContentTypeSlug, id = item.Id })"
                                                        Size="ButtonSize.Small">
                                                    <Icon Name="IconName.Eye" />
                                                </Button>
                                                <Tooltip Placement="TooltipPlacement.Top">Preview</Tooltip>
                                                <Button data-test="edit-btn"
                                                        Ghost="true"
                                                        Href="@NavigationManager.Plugin("Content Management", "Update Content", new { contentTypeSlug = ContentTypeSlug, id = item.Id })"
                                                        Size="ButtonSize.Small">
                                                    <Icon Name="IconName.Edit" />
                                                </Button>
                                                <Tooltip Placement="TooltipPlacement.Top">Edit</Tooltip>

                                                <Button data-test="delete-btn"
                                                        Ghost="true"
                                                        Size="ButtonSize.Small"
                                                        OnClick="@(evt => OnDelete(item))">
                                                    <Icon Name="IconName.Delete" />
                                                </Button>
                                                <Tooltip Placement="TooltipPlacement.Top">Delete</Tooltip>
                                            </ButtonGroup>
                                        </TableCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    }

                    @if (ContentType.Fields?.Count == 0)
                    {
                        <EmptyTable Message="This Content Type doesn't have any field">
                            <Button Color="Color.Primary"
                                    Href="@NavigationManager.Plugin("ContentType Management", "Update ContentType", new { id = ContentType.Id })">
                                <Icon Name="IconName.Edit" />
                                Edit @ContentType.Title
                            </Button>

                        </EmptyTable>
                    }
                    else if (Data.Count == 0)
                    {
                        <EmptyTable Message="There is no Content yet!">
                            <Button autofocus="true"
                                    Color="Color.Primary"
                                    Href="@NavigationManager.Plugin("Content Management", "Create Content", new { contentTypeSlug = ContentTypeSlug })"
                                    id="contentCreateButton"
                                    Size="ButtonSize.Small">
                                <Icon Name="IconName.Plus" />
                                Add First @ContentType.Title
                            </Button>
                        </EmptyTable>
                    }
                </ChildContent>
            </Card>
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    ConfirmService Confirm { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    string? ContentTypeSlug;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentDetailResponse> Data { get; set; } = [];

    List<ContentTypeField> Fields { get; set; } = [];

    string PageTitle = "Content List (Draft)";

    async Task OnDelete(ContentDetailResponse content)
    {
        var result = await Confirm.Show("Are you sure to remove this row?");

        if (result)
        {
            await ContentClient.DeleteAsync(ContentTypeSlug, content.Id);
            await FetchData();
        }
    }

    protected async Task FetchData()
    {
        ContentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");

        if (!string.IsNullOrEmpty(ContentTypeSlug))
        {
            ContentType = (await ContentTypeClient.GetBySlugAsync(ContentTypeSlug)).Data;

            if (ContentType != null)
            {
                PageTitle = ContentType.Title + " List (Draft)";
                Fields = ContentType.Fields.ToList();

                var response = await ContentClient.GetAllAsync(ContentTypeSlug);
                if (response?.Data != null)
                {
                    Data = response.Data.ToList();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }
}
