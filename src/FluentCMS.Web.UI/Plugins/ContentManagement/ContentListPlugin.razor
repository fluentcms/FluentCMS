@inherits BasePlugin
@using FluentCMS.Web.UI.Plugins.ContentManagement

@* TODO: This plugin is not tested and is not complete yet. *@
<PluginBody Title="Api Tokens List">
    <ActionsFragment>
        <Button Href="@GetUrl("Create Content")" Color="Color.Primary">
            <Icon Name="IconName.Plus" />Add New Content
        </Button>
    </ActionsFragment>
    <ChildContent>
        <DataTable Items="Data">
            @foreach (var field in Fields)
            {
                <DataTableItem Label="@field.Title">
                    @(context.Value[field.Slug])
                </DataTableItem>
            }
            <DataTableItem>
                <Button data-test="edit-btn"
                        Ghost="true"
                        Href="@GetUrl("Update Content", new { contentTypeSlug = ContentTypeSlug, id = context.Id })"
                        Size="ButtonSize.Small">
                    <Icon Name="IconName.Edit" />
                </Button>
            </DataTableItem>
        </DataTable>
    </ChildContent>
</PluginBody>

@code {
    [Inject]
    ConfirmService Confirm { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    string? ContentTypeSlug;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentDetailResponse> Data { get; set; } = [];

    List<ContentTypeField> Fields { get; set; } = [];

    string PageTitle = "Content List (Draft)";

    async Task OnDelete(ContentDetailResponse content)
    {
        var result = await Confirm.Show("Are you sure to remove this row?");

        if (result)
        {
            await ContentClient.DeleteAsync(ContentTypeSlug, content.Id);
            await FetchData();
        }
    }

    protected async Task FetchData()
    {
        ContentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");

        if (!string.IsNullOrEmpty(ContentTypeSlug))
        {
            ContentType = (await ContentTypeClient.GetBySlugAsync(ContentTypeSlug)).Data;

            if (ContentType != null)
            {
                PageTitle = ContentType.Title + " List (Draft)";
                Fields = ContentType.Fields.ToList();

                var response = await ContentClient.GetAllAsync(ContentTypeSlug);
                if (response?.Data != null)
                {
                    Data = response.Data.ToList();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    async Task TableRowDefaultAction(ContentDetailResponse content) 
    {
        var url = GetUrl("Content Detail", new { contentTypeSlug = ContentTypeSlug, id = content.Id });
        NavigationManager.NavigateTo(url);
    }
}
