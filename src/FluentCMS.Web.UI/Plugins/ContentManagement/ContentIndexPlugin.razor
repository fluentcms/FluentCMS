@using FluentCMS.Web.UI.Plugins.ContentManagement

<ContentLayout>
    <Page>
        <PageHeader Title="Content Management"/>
        <PageBody>
            <Select @bind-Value="AppSlug"
                    class="lg:hidden"
                    Dense="true"
                    Id="contentAppSelect"
                    Placeholder="Choose an App..."
                    OnChange="(string value) => OnChangeApp()">
                @foreach (var app in Apps)
                {
                    <Option Value="@app.Slug">@app.Title</Option>
                }
            </Select>
            <Spacer class="lg:hidden"/>

            <Grid GutterY="GridGutter.Medium" class="lg:hidden">
                @foreach (var collection in Collections)
                {
                    
                    <GridItem Small="GridItemColumn.Twelve">
                        <a Href="@($"?pluginDef=Content Management&typeName=Content List&appSlug={AppSlug}&contentTypeSlug={collection.Slug}")"
                            id="@($"contentSidebar{@collection.Slug}Link")">
                            <Card>
                                <CardBody>
                                    <CardTitle>@collection.Title</CardTitle>
                                    <Typography>@collection.Description</Typography>
                                </CardBody>
                            </Card>
                        </a>
                    </GridItem>
                }
            </Grid>

        </PageBody>
    </Page>
</ContentLayout>

@code {
        [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    ILocalStorageService LocalStorageService { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    string? AppSlug { get; set; }

    List<AppDetailResponse> Apps { get; set; } = [];

    List<ContentTypeDetailResponse> Collections { get; set; } = [];

    async Task Load()
    {
        var response = await ContentTypeClient.GetAllAsync(AppSlug);

        if (response?.Data == null) return;

        Collections = response.Data.ToList();
    }

    async Task OnChangeApp()
    {
        await Load();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        AppSlug = NavigationManager.GetAppSlugFromQuery();

        if (!string.IsNullOrEmpty(AppSlug))
        {
            await Load();
        }

        var response = await AppClient!.GetAllAsync();

        if (response?.Data == null) return;

        Apps = response.Data.ToList();

        StateHasChanged();

        if (!string.IsNullOrEmpty(AppSlug)) return;

        if (Apps.Count() == 0) return;

        var slug = await LocalStorageService.GetItemAsStringAsync("APP_SLUG");

        AppSlug = Apps.Exists(x => x.Slug == slug) ? slug : Apps.First().Slug;

        StateHasChanged();

        await LocalStorageService.SetItemAsStringAsync("APP_SLUG", AppSlug);

        await Load();
    }
}
