@using FluentCMS.Web.UI.Plugins.ContentManagement

<ContentLayout>
    <Page>
        <PageHeader Title="Content Management" />
        <PageBody>
            <Spacer class="lg:hidden" />
            <Grid class="lg:hidden"
                  GutterY="GridGutter.Medium"
                  Id="contentIndexCollectionList">
                <GridItem HideLarge="true"
                          Small="GridItemColumn.Twelve">
                </GridItem>
                @foreach (var collection in Collections)
                {
                    <GridItem Small="GridItemColumn.Twelve">
                        <a Href="@NavigationManager.Plugin("Content Management", "Content List", new { contentTypeSlug = collection.Slug })"
                           id="@($"contentIndex{@collection.Slug}Link")">
                            <Card>
                                <CardBody>
                                    <CardTitle>
                                        @collection.Title
                                    </CardTitle>
                                    <Typography>
                                        @collection.Description
                                    </Typography>
                                </CardBody>
                            </Card>
                        </a>
                    </GridItem>
                }
            </Grid>
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    ILocalStorageService LocalStorageService { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    List<ContentTypeDetailResponse> Collections { get; set; } = [];

    async Task Load()
    {
        var response = await ContentTypeClient.GetAllAsync();

        if (response?.Data == null) return;

        Collections = response.Data.ToList();
    }

    async Task OnChangeApp()
    {
        await Load();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await Load();
        StateHasChanged();
    }
}
