@using System.Text.Json
<ContentLayout>
    <Page>
        <PageHeader HasBack="true"
                    Title="@PageTitle"/>

        <PageBody>
            <Form Model="@Model"
                  OnSubmit="OnSubmit">
                <Card>
                    <CardBody>
                        @foreach (var field in Fields)
                        {
                            <Input Id="@($"contentCreate{@field.Slug}Input")"
                                Label="@(String.IsNullOrEmpty(field.Label) ? field.Title : field.Label)"
                                Name="@field.Slug"
                                Placeholder="@(String.IsNullOrEmpty(field.Placeholder) ? $"Enter {field.Title}..." : field.Placeholder)"
                                Required="@field.IsRequired"
                                TValue="string"
                                Value="@(Model[field.Slug!] as string)"
                                ValueChanged="str => Model[field.Slug!] = str"/>
                        }
                    </CardBody>
                    <CardActions>
                        <Button id="contentCreateCancelButton"
                                @onclick="GoBack">
                            Cancel
                        </Button>
                        <Button Color="Color.Primary"
                                id="contentCreateSubmitButton"
                                Type="ButtonType.Submit">
                            Save
                        </Button>
                    </CardActions>
                </Card>
            </Form>
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject] ContentClient ContentClient { get; set; } = default!;

    [Inject] ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject] NavigationManager NavigationManager { set; get; } = default!;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    Dictionary<string, object?> Model = new();

    string PageTitle = "Create Content";

    void GoBack()
    {
        NavigationManager.NavigateTo(NavigationManager.Plugin("Content Management", "Content List", new { contentTypeSlug = ContentType.Slug }));
    }

    protected override async Task OnInitializedAsync()
    {
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");

        if (!string.IsNullOrEmpty(contentTypeSlug))
        {
            var response = await ContentTypeClient.GetAllAsync();
            if (response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();

                Model = new Dictionary<string, object?>();
                foreach (var field in Fields)
                {
                    Model.Add(field.Slug, "");
                }
                PageTitle = "Create " + ContentType.Title;
            }
        }
    }

    async Task OnSubmit()
    {
        try
        {
            // TODO: Doesn't work
            var response = await ContentClient.CreateAsync(ContentType.Slug, new ContentCreateRequest {
                Value = Model
            });

            if (response?.Data != null)
            {
                GoBack();
            }
        }
        catch (Exception exception)
        {
        }
    }

}
