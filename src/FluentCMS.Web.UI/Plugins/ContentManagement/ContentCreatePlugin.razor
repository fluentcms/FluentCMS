@using System.Text.Json
<ContentLayout>
    <Page>
        <PageHeader Title="@PageTitle"/>

        <PageBody>
            <Form OnSubmit="OnSubmit">
                <Card>
                    <CardBody>
                        @foreach (var field in Fields)
                        {
                            // TODO: Cleanup this
                            <Input Label="@field.Label"
                                   Placeholder="@field.Placeholder"
                                   Required="@field.IsRequired"
                                   Value="@(Model?.Value![field.Slug!] as string)"
                                   ValueChanged="s => Model.Value[field.Slug] = s"/>
                        }

                        <ButtonGroup>
                            <Button OnClick="GoBack">
                                Cancel
                            </Button>
                            <Button Color="Color.Primary"
                                    Type="ButtonType.Submit">
                                Save
                            </Button>
                        </ButtonGroup>
                    </CardBody>
                </Card>
            </Form>
        </PageBody>
    </Page>
</ContentLayout>
<pre>
@JsonSerializer.Serialize(Model)
</pre>

@code {
    [Inject] AppClient AppClient { get; set; } = default!;

    [Inject] ContentClient ContentClient { get; set; } = default!;

    [Inject] ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject] NavigationManager NavigationManager { set; get; } = default!;

    AppDetailResponse App { get; set; } = new();

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    ContentCreateRequest Model = new() { Value = new Dictionary<string, object?>() };

    string PageTitle = "Create Content";

    void GoBack()
    {
        NavigationManager.NavigateTo($"?pluginDef=Content Management&typeName=Content List&contentTypeSlug={ContentType.Slug}&appSlug={App.Slug}");
    }

    protected override async Task OnInitializedAsync()
    {
        var appSlug = NavigationManager.GetStringFromQuery("appSlug");
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");

        if (!string.IsNullOrEmpty(contentTypeSlug) && !string.IsNullOrEmpty(appSlug))
        {
            var appResponse = await AppClient.GetBySlugAsync(appSlug);
            if (appResponse?.Data != null)
            {
                App = appResponse?.Data;
            }

            var response = await ContentTypeClient.GetAllAsync(appSlug);
            if (response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();
                foreach (var field in Fields)
                {
                    Model.Value.Add(field.Slug, "");
                }
                PageTitle = "Create " + ContentType.Title;
            }
        }
    }

    async Task OnSubmit()
    {
        try
        {
            // TODO: Doesn't work
            var response = await ContentClient.CreateAsync(App.Slug, ContentType.Slug, Model);

            if (response?.Data != null)
            {
                GoBack();
            }
        }
        catch (Exception exception)
        {
        }
    }

}
