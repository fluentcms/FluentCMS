@using System.Text.Json
<ContentLayout>
    <Page>
        <PageHeader HasBack="true"
                    Title="@PageTitle" />
        <PageBody>
            @if (Model != null)
            {
                <Grid Gutter="GridGutter.Large">
                    <GridItem Small="GridItemColumn.Twelve"
                              Medium="GridItemColumn.Seven"
                              Large="GridItemColumn.Nine">
                        <Grid Gutter="GridGutter.Large" JustifySmall="GridJustify.End">

                            @foreach (var field in Fields)
                            {
                                <GridItem Small="GridItemColumn.Twelve">
                                    <Typography><strong>@(String.IsNullOrEmpty(field.Label) ? field.Title : field.Label):</strong></Typography>
                                    <Typography>
                                        @ParseValue(Model.Value![field.Slug!])
                                    </Typography>
                                </GridItem>
                            }


                        </Grid>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve"
                              Medium="GridItemColumn.Five"
                              Large="GridItemColumn.Three">
                        <Card>
                            <CardBody>
                                @if (!string.IsNullOrEmpty(View.CreatedBy))
                                {
                                    <Typography><strong>Created By</strong></Typography>
                                    <Typography>@View.CreatedBy</Typography>
                                    <Spacer />
                                }
                                @if (!string.IsNullOrEmpty(View.CreatedAt.ToString()))
                                {
                                    <Typography><strong>Created At</strong></Typography>
                                    <Typography>@View.CreatedAt</Typography>
                                    <Spacer />
                                }
                                @if (!string.IsNullOrEmpty(View.ModifiedBy))
                                {
                                    <Typography><strong>Modified By</strong></Typography>
                                    <Typography>@View.ModifiedBy</Typography>
                                    <Spacer />
                                }
                                @if (!string.IsNullOrEmpty(View.ModifiedAt.ToString()))
                                {
                                    <Typography><strong>Modified At</strong></Typography>
                                    <Typography>@View.ModifiedAt</Typography>
                                }
                            </CardBody>
                        </Card>
                        <Spacer />
                        <Button Block="true"
                                Color="Color.Primary"
                                Href="@NavigationManager.Plugin("Content Management", "Update Content", new { contentTypeSlug = ContentType.Slug, id = View.Id })"
                                Item="true"
                                Outline="true">
                            <Icon Name="IconName.Edit" />
                            Edit
                        </Button>
                        <Spacer Size="SpacerSize.Small" />
                        <Button Block="true"
                                Color="Color.Danger"
                                Item="true"
                                Outline="true"
                                @onclick="OnDelete">
                            <Icon Name="IconName.Edit" />
                            Delete
                        </Button>
                    </GridItem>
                </Grid>
            }
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    ConfirmService Confirm { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    IJSRuntime JsRuntime { set; get; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    Guid? ContentId;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    ContentUpdateRequest Model = new();

    string PageTitle = "Content Detail";

    ContentDetailResponse View = new();

    async Task GoBack()
    {
        await JsRuntime.InvokeAsync<object>("history.back");
    }

    async Task LoadData()
    {
        var response = await ContentClient.GetAllAsync(ContentType.Slug!);

        if (response?.Data != null)
        {
            View = response.Data.ToList().Find(x => x.Id == ContentId);

            Model = new()
            {
                Id = View!.Id,
                Value = View!.Value
            };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");
        // TODO: GetGuidFromQuery("id");
        ContentId = NavigationManager.GetIdFromQuery();

        if (!string.IsNullOrEmpty(contentTypeSlug))
        {
            var response = await ContentTypeClient.GetAllAsync();
            if (response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();
                PageTitle = ContentType.Title + " Detail";

                if (ContentId != null)
                {
                    await LoadData();
                }
            }
        }
    }

    object? ParseValue(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind switch
            {
                JsonValueKind.Null => null,
                JsonValueKind.Undefined => null,
                JsonValueKind.String => jsonElement.GetString() as object,
                JsonValueKind.Number => jsonElement.GetDecimal() as object,
                JsonValueKind.True => true as object,
                JsonValueKind.False => false as object,
                JsonValueKind.Array => jsonElement.EnumerateArray().Select(x => ParseValue(x)).ToList() as object,
                JsonValueKind.Object => jsonElement.EnumerateObject().ToDictionary(x => x.Name, x => ParseValue(x.Value)) as object,
                _ => null
            };
        }
        return value;
    }

    async Task OnDelete()
    {
        var result = await Confirm.Show("Are you sure to remove this row?");

        if (result)
        {
            await ContentClient.DeleteAsync(ContentType.Slug, View.Id);
            await GoBack();
        }
    }
    async Task OnSubmit()
    {
        try
        {
            var response = await ContentClient.UpdateAsync(ContentType.Slug, Model);

            if (response?.Data != null)
            {
                GoBack();
            }
        }
        catch (Exception exception)
        {

        }
    }
}
