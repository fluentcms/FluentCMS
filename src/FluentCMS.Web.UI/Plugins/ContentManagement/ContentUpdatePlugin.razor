@using System.Text.Json
<ContentLayout>
    <Page>       
        <PageHeader HasBack="true"
                    Title="@PageTitle"/>
        <PageBody>
            @if (Model != null)
            {
                <Form Model="@Model"
                      OnSubmit="OnSubmit">
                    <Card>
                        <CardBody>
                            @foreach (var field in Fields)
                            {
                                <Input Id="@($"contentUpdate{field.Slug}Input")"
                                       Label="@field.Label"
                                       Placeholder="@field.Placeholder"
                                       Required="@field.IsRequired"
                                       TValue="string"
                                       Value="@((string) ParseValue(Model.Value![field.Slug!]!)!)"
                                       ValueChanged="x => Model.Value![field.Slug!] = x"
                                       />
                            }

                                       
                            <ButtonGroup>
                                <Button id="contentUpdateCancelButton"
                                        OnClick="GoBack">
                                    Cancel
                                </Button>
                                <Button Color="Color.Primary"
                                        id="contentUpdateSubmitButton"
                                        Type="ButtonType.Submit">
                                    Save
                                </Button>
                            </ButtonGroup>
                        </CardBody>
                    </Card>
                </Form>
            }
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    AppDetailResponse App { get; set; } = new();

    Guid? ContentId;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    ContentUpdateRequest Model = new();

    string PageTitle = "Update Content";

    ContentDetailResponse View = new();

    void GoBack()
    {
        NavigationManager.NavigateTo($"?pluginDef=Content Management&typeName=Content List&contentTypeSlug={ContentType.Slug}&appSlug={App.Slug}");
    }

    async Task LoadData()
    {
        var response = await ContentClient.GetAllAsync(App.Slug!, ContentType.Slug!);

        if (response?.Data != null)
        {
            View = response.Data.ToList().Find(x => x.Id == ContentId);

            Model = new()
                {
                    Id = View!.Id,
                    Value = View!.Value
                };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var appSlug = NavigationManager.GetStringFromQuery("appSlug");
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");
        // TODO: GetGuidFromQuery("id");
        ContentId = NavigationManager.GetIdFromQuery();

        if (!string.IsNullOrEmpty(contentTypeSlug) && !string.IsNullOrEmpty(appSlug))
        {
            var appResponse = await AppClient.GetBySlugAsync(appSlug);
            if (appResponse?.Data != null)
            {
                App = appResponse?.Data;
            }

            var response = await ContentTypeClient.GetAllAsync(appSlug);
            if (response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();
                PageTitle = "Update " + ContentType.Title;

                if (ContentId != null)
                {
                    await LoadData();
                }
            }
        }
    }

    object? ParseValue(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind switch
            {
                JsonValueKind.Null => null,
                JsonValueKind.Undefined => null,
                JsonValueKind.String => jsonElement.GetString() as object,
                JsonValueKind.Number => jsonElement.GetDecimal() as object,
                JsonValueKind.True => true as object,
                JsonValueKind.False => false as object,
                JsonValueKind.Array => jsonElement.EnumerateArray().Select(x => ParseValue(x)).ToList() as object,
                JsonValueKind.Object => jsonElement.EnumerateObject().ToDictionary(x => x.Name, x => ParseValue(x.Value)) as object,
                _ => null
            };
        }
        return value;
    }

    async Task OnSubmit()
    {
        try
        {
            var response = await ContentClient.UpdateAsync(App.Slug, ContentType.Slug, Model);

            if (response?.Data != null)
            {
                GoBack();
            }
        }
        catch (Exception exception)
        {

        }
    }
}
