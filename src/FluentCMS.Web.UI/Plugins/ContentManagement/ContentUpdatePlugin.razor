@using System.Text.Json
<ContentLayout>
    <Page>       
        <PageHeader HasBack="true"
                    Title="@PageTitle"/>
        <PageBody>
            @if (Model != null)
            {
                <Form Model="@Model"
                      OnSubmit="OnSubmit">
                    <Card>
                        <CardBody>
                            @foreach (var field in Fields)
                            {
                                <Input Id="@($"contentUpdate{field.Slug}Input")"
                                       Label="@(String.IsNullOrEmpty(field.Label) ? field.Title : field.Label)"
                                       Name="@field.Slug"
                                       Placeholder="@(String.IsNullOrEmpty(field.Placeholder) ? $"Enter {field.Title}..." : field.Placeholder)"
                                       TValue="string"
                                       Value="@((string) ParseValue(Model.Value![field.Slug!]!)!)"
                                       ValueChanged="x => Model.Value![field.Slug!] = x"
                                       />
                            }
                        </CardBody>
                        <CardActions>
                            <Button id="contentUpdateCancelButton" @onclick="GoBack">
                                Cancel
                            </Button>
                            <Button Color="Color.Primary"
                                    id="contentUpdateSubmitButton"
                                    Type="ButtonType.Submit">
                                Save
                            </Button>
                        </CardActions>
                    </Card>
                </Form>
            }
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    IJSRuntime JsRuntime { set; get; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    Guid? ContentId;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    ContentUpdateRequest Model = new();

    string PageTitle = "Update Content";

    ContentDetailResponse View = new();

    async Task GoBack()
    {
        await JsRuntime.InvokeAsync<object>("history.back");
    }

    async Task LoadData()
    {
        var response = await ContentClient.GetAllAsync(ContentType.Slug!);

        if (response?.Data != null)
        {
            View = response.Data.ToList().Find(x => x.Id == ContentId);

            Model = new()
                {
                    Id = View!.Id,
                    Value = View!.Value
                };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");
        // TODO: GetGuidFromQuery("id");
        ContentId = NavigationManager.GetIdFromQuery();

        if (!string.IsNullOrEmpty(contentTypeSlug))
        {
            var response = await ContentTypeClient.GetAllAsync();
            if (response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();
                PageTitle = "Update " + ContentType.Title;

                if (ContentId != null)
                {
                    await LoadData();
                }
            }
        }
    }

    object? ParseValue(object value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind switch
            {
                JsonValueKind.Null => null,
                JsonValueKind.Undefined => null,
                JsonValueKind.String => jsonElement.GetString() as object,
                JsonValueKind.Number => jsonElement.GetDecimal() as object,
                JsonValueKind.True => true as object,
                JsonValueKind.False => false as object,
                JsonValueKind.Array => jsonElement.EnumerateArray().Select(x => ParseValue(x)).ToList() as object,
                JsonValueKind.Object => jsonElement.EnumerateObject().ToDictionary(x => x.Name, x => ParseValue(x.Value)) as object,
                _ => null
            };
        }
        return value;
    }

    async Task OnSubmit()
    {
        try
        {
            var response = await ContentClient.UpdateAsync(ContentType.Slug, Model);

            if (response?.Data != null)
            {
                await GoBack();
            }
        }
        catch (Exception exception)
        {

        }
    }
}
