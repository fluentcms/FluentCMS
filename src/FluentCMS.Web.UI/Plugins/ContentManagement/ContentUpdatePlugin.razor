<ContentLayout>
    <Page>
        <PageHeader Title="@PageTitle" />
        <PageBody>
            @* TODO: Model.Value*@
            <Form Model="@Model"
                  OnSubmit="OnSubmit">
                <Card>
                    <CardBody>
                        @foreach (var field in Fields)
                        {
                            <Input Label="@field.Label"
                                   Placeholder="@field.Placeholder"
                                   Required="@field.IsRequired"
                                   Value="@(Model.Value![field.Slug!] as string)"
                                   ValueChanged="str => Model.Value![field.Slug!] = str"/>
                        }
                        <ButtonGroup>
                            <Button OnClick="GoBack">
                                Cancel
                            </Button>
                            <Button Color="Color.Primary"
                                    Type="ButtonType.Submit">
                                Save
                            </Button>
                        </ButtonGroup>
                    </CardBody>
                </Card>
            </Form>
        </PageBody>
    </Page>
</ContentLayout>

@code {
    [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentClient ContentClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    AppDetailResponse App { get; set; } = new();

    Guid? ContentId;

    ContentTypeDetailResponse ContentType { get; set; } = new();

    List<ContentTypeField> Fields = [];

    ContentUpdateRequest Model = new();

    string PageTitle = "Update Content";

    ContentDetailResponse View = new();

    void GoBack()
    {
        NavigationManager.NavigateTo($"?pluginDef=Content Management&typeName=Content List&contentTypeSlug={ContentType.Slug}&appSlug={App.Slug}");
    }

    async Task LoadData()
    {
        var response = await ContentClient.GetAllAsync(App.Slug, ContentType.Slug);

        if(response?.Data != null)
        {
            View = response.Data.ToList().Find(x => x.Id == ContentId);

            Model.Id = View.Id;
            Model.Value = View.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var appSlug = NavigationManager.GetStringFromQuery("appSlug");
        var contentTypeSlug = NavigationManager.GetStringFromQuery("contentTypeSlug");
        // TODO: GetGuidFromQuery("id");
        ContentId = NavigationManager.GetIdFromQuery();

        if(!string.IsNullOrEmpty(contentTypeSlug) && !string.IsNullOrEmpty(appSlug))
        {
            var appResponse = await AppClient.GetBySlugAsync(appSlug);
            if(appResponse?.Data != null)
            {
                App = appResponse?.Data;
            }

            var response = await ContentTypeClient.GetAllAsync(appSlug);
            if(response?.Data != null)
            {
                ContentType = response.Data.ToList().Find(x => x.Slug == contentTypeSlug);
                Fields = ContentType.Fields.ToList();
                PageTitle = "Update " + ContentType.Title;

                if(ContentId != null)
                {
                    LoadData();
                }
            }
        }
    }

    async Task OnSubmit()
    {
        try
        {
            var response = await ContentClient.UpdateAsync(App.Slug, ContentType.Slug, Model);

            if(response?.Data != null)
            {
                GoBack();
            }
        }
        catch(Exception exception)
        {

        }
    }
}
