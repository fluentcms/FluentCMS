<Page>
    <PageHeader HasBack="false"
                Title="Users List"
                Subtitle="List of all registered users.">
        <PageHeaderActions>
            <ButtonGroup>
                <Button Color="Color.Primary"
                        Href="?PluginDef=User Management&typeName=Create User">
                    <Icon Name="IconName.Plus" />
                    Add User
                </Button>
            </ButtonGroup>
        </PageHeaderActions>
    </PageHeader>
    <PageBody>
        <Grid ItemsSmall="GridItems.Center"
              JustifySmall="GridJustify.Between">
            <GridItem Small="GridItemColumn.Six">
                <Input Dense="true"
                       IconStart="IconName.Search"
                       Placeholder="Search for entities" />
            </GridItem>
            <GridItem Small="GridItemColumn.Auto">
                <ButtonGroup>
                    <Button>
                        <Icon Name="IconName.Cog" />
                        Table Settings
                    </Button>
                </ButtonGroup>
            </GridItem>
        </Grid>
        <Spacer/>
        <Table>
            <TableHead>
                <TableCell>Username</TableCell>
                <TableCell>Email</TableCell>
                <TableCell>Phone</TableCell>
                <TableCell>Enable</TableCell>
                <TableCell>Login Count</TableCell>
                <TableCell>Last Login</TableCell>
                <TableCell>Actions</TableCell>
            </TableHead>
            <TableBody>
                @foreach (var user in Users) {
                    <TableRow>
                        <TableCell> @user.Username </TableCell>
                        <TableCell> @user.Email </TableCell>
                        <TableCell> @user.PhoneNumber </TableCell>
                        <TableCell>
                            @if(user.Enabled) {
                                <Badge Color="Color.Success">Enabled</Badge>
                            } else {
                                <Badge Color="Color.Danger">Disabled</Badge>
                            }
                        </TableCell>
                        <TableCell> @user.LoginCount </TableCell>
                        <TableCell> @user.LastLoginAt </TableCell>
                        <TableCell>
                            <ButtonGroup>
                                <Button Color="Color.Danger">
                                    <Icon Name="IconName.Delete" />
                                    Delete
                                </Button>
                                <Button Color="Color.Primary"
                                        Href="@($"?PluginDef=User Management&typeName=Update User&id=@user.Id")"
                                        Outline="true">
                                    <Icon Name="IconName.Edit" />
                                    Edit
                                </Button>
                            </ButtonGroup>
                        </TableCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        <Spacer/>
        @if (TotalPages > 0) {
            <Grid ItemsSmall="GridItems.Center"
                  JustifySmall="GridJustify.Between">
                <GridItem>
                    <PaginationInfo Total="TotalCount" Current="PageSize" />
                </GridItem>
                <GridItem>
                    <Pagination Total="TotalPages" Current="PageNumber" />
                </GridItem>
            </Grid>
        }
    </PageBody>
</Page>

@code {
    [Inject]
    private UserClient? UserClient { get; set; }

    private List<UserDetailResponse> Users { get; set; } = [];

    private int TotalPages {get; set;} = 0;
    private int TotalCount {get; set;} = 0;
    private int PageNumber {get; set;} = 0;
    private int PageSize {get; set;} = 0;

    protected override async Task OnInitializedAsync()
    {
        var response = await UserClient!.GetAllAsync();

        if (response?.Data != null)
            TotalPages = (int)response.TotalPages;
            TotalCount = (int)response.TotalCount;
            PageSize = (int)response.PageSize;
            PageNumber = (int)response.PageNumber;
            Users = response.Data.ToList();
    }
}
