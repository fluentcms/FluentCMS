<Page>
    <PageHeader HasBack="false"
                Title="Users List">
        <PageHeaderActions>
            <ButtonGroup>
                <Button Color="Color.Primary"
                        Href="?PluginDef=User Management&typeName=Create User">
                    <Icon Name="IconName.Plus" />
                    Add User
                </Button>
            </ButtonGroup>
        </PageHeaderActions>
    </PageHeader>
    <PageBody>
        @if (false) {
            <Grid ItemsSmall="GridItems.Center"
                  JustifySmall="GridJustify.Between">
                <GridItem Small="GridItemColumn.Six">
                    <Input Dense="true"
                           IconStart="IconName.Search"
                           Placeholder="Search for entities" />
                </GridItem>
                <GridItem Small="GridItemColumn.Auto">
                    <ButtonGroup>
                        <Button>
                            <Icon Name="IconName.Cog" />
                            Table Settings
                        </Button>
                    </ButtonGroup>
                </GridItem>
            </Grid>
            <Spacer/>
        }
        <Table>
            <TableHead>
                <TableCell>Username</TableCell>
                <TableCell>Email</TableCell>
                <TableCell>Phone</TableCell>
                <TableCell>Enable</TableCell>
                <TableCell>Login Count</TableCell>
                <TableCell>Last Login</TableCell>
                <TableCell>Actions</TableCell>
            </TableHead>
            <TableBody>
                @foreach (var user in Users) {
                    <TableRow>
                        <TableCell> @user.Username </TableCell>
                        <TableCell> @user.Email </TableCell>
                        <TableCell> @user.PhoneNumber </TableCell>
                        <TableCell>
                            @if(user.Enabled) {
                                <Badge Color="Color.Success">Enabled</Badge>
                            } else {
                                <Badge Color="Color.Danger">Disabled</Badge>
                            }
                        </TableCell>
                        <TableCell> @user.LoginCount </TableCell>
                        <TableCell> @user.LastLoginAt </TableCell>
                        <TableCell>
                            <ButtonGroup>
                                <Button Color="Color.Danger" OnClick="@(evt => OnDelete(user))">
                                    <Icon Name="IconName.Delete" />
                                    Delete
                                </Button>
                                <Button Color="Color.Primary"
                                        Href="@($"?PluginDef=User Management&typeName=Update User&id={user.Id}")"
                                        Outline="true">
                                    <Icon Name="IconName.Edit" />
                                    Edit
                                </Button>
                            </ButtonGroup>
                        </TableCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        @if (TotalPages > 0) {
            <Spacer/>
            <Grid ItemsSmall="GridItems.Center"
                  JustifySmall="GridJustify.Between">
                <GridItem>
                    <PaginationInfo Current="PageSize"
                                    Total="TotalCount" />
                </GridItem>
                <GridItem>
                    <Pagination Current="PageNumber"
                                Total="TotalPages" />
                </GridItem>
            </Grid>
        }
    </PageBody>
</Page>

@code {
    [Inject]
    UserClient? UserClient { get; set; }

    [Inject]
    ConfirmService Confirm { get; set; }

    List<UserDetailResponse> Users { get; set; } = [];

    long TotalPages {get; set;}
    long TotalCount {get; set;}
    long PageNumber {get; set;}
    long PageSize {get; set;}

    protected override async Task OnInitializedAsync()
    {
        var response = await UserClient!.GetAllAsync();

        if (response?.Data != null)
        {
            TotalPages = response.TotalPages;
            TotalCount = response.TotalCount;
            PageSize = response.PageSize;
            PageNumber = response.PageNumber;
            Users = response.Data.ToList();
        }
    }

    private async Task OnDelete(UserDetailResponse user) {
        // var result = await Confirm.Show("Are you sure to remove this user?");

        if(true)
        {
            Console.WriteLine("Should delete user");
            //await UserClient!.DeleteAsync(user.Id);
        }
    }
}
