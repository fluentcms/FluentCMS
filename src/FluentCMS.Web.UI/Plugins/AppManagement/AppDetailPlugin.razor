<Page>
    <PageHeader HasBack="true"
                Title="App Detail">
    </PageHeader>
    <PageBody>
        <Grid Gutter="GridGutter.Large">
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Seven"
                      Large="GridItemColumn.Nine">
                <Grid Gutter="GridGutter.Large" JustifySmall="GridJustify.End">
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography><strong>Title:</strong></Typography>
                        <Typography>
                            @View.Title
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography><strong>Slug:</strong></Typography>
                        <Typography>
                            @View.Slug
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography><strong>Description:</strong></Typography>
                        <Typography>
                            @View.Description
                        </Typography>
                    </GridItem>
                </Grid>
            </GridItem>
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Five"
                      Large="GridItemColumn.Three">
                <Card>
                    <CardBody>
                        @if(!string.IsNullOrEmpty(View.CreatedBy))
                        {
                            <Typography><strong>Created By</strong></Typography>
                            <Typography>@View.CreatedBy</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.CreatedAt.ToString()))
                        {
                            <Typography><strong>Created At</strong></Typography>
                            <Typography>@View.CreatedAt</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.ModifiedBy))
                        {
                            <Typography><strong>Modified By</strong></Typography>
                            <Typography>@View.ModifiedBy</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.ModifiedAt.ToString()))
                        {
                            <Typography><strong>Modified At</strong></Typography>
                            <Typography>@View.ModifiedAt</Typography>
                        }
                    </CardBody>
                </Card>
                <Spacer/>
                <Button Block="true"
                        Color="Color.Primary"
                        Href="@($"?PluginDef=App Management&typeName=Update App&appSlug={View.Slug}")"
                        Item="true"
                        Outline="true">
                    <Icon Name="IconName.Edit" />
                    Edit
                </Button>
                <Spacer Size="SpacerSize.Small" />
                <Button Block="true"
                        Color="Color.Danger"
                        Item="true"
                        Outline="true"
                        OnClick="OnDelete">
                    <Icon Name="IconName.Edit" />
                    Delete
                </Button>
            </GridItem>
            
        </Grid>
    </PageBody>
</Page>

@code {
    [Inject]
    ConfirmService Confirm { set; get; } = default!;

    [Inject]
    IJSRuntime JsRuntime { set; get; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    [Inject]
    AppClient AppClient { get; set; } = default!;

    string? Message { get; set; }

    AppDetailResponse View { get; set; } = new();

    async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }

    async Task OnDelete() 
    {
        var result = await Confirm.Show("Are you sure to remove this app?");

        if(result) {
            await AppClient.DeleteAsync(View.Id);  
            await GoBack(); 
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var appSlug = NavigationManager.GetAppSlugFromQuery();
        if (appSlug != null)
        {
            try
            {
                View = (await AppClient.GetBySlugAsync(appSlug)).Data;
            }
            catch (Exception)
            {
                Message = "An error occured!";
            }
        }
    }
}
