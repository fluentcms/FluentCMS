@inject NavigationManager NavigationManager
@inject AccountClient AccountClient;
@inject IHttpContextAccessor HttpContextAccessor;
<div class="flex justify-center">
    <Card>
        <CardBody>
            <CardTitle>Login</CardTitle>
            <EditForm Model="UserAuthenticateRequest" class="f-login-form" OnValidSubmit="Submit" method="post" FormName="loginForm">
                <FormField Label="Your Username">
                    <InputText Type="text" class="f-input" @bind-Value="UserAuthenticateRequest.Username"></InputText>
                </FormField>
                <FormField Label="Your Password">
                    <InputText class="f-input" @bind-Value="UserAuthenticateRequest.Password" type="password"></InputText>
                </FormField>
                <FormField>
                    <div class="flex items-center">
                        <InputCheckbox class="f-checkbox" @bind-Value="Remember" />
                        <Label>Remember me</Label>
                    </div>
                </FormField>
                <Button size="lg" color="primary" Type="submit">Login to your account</Button>
            </EditForm>
        </CardBody>
    </Card>
</div>

@code {
    [SupplyParameterFromForm]
    public UI.UserAuthenticateRequest UserAuthenticateRequest { get; set; } = new() { Username = "", Password = "" };
    public bool Remember { get; set; }
    public async Task Submit()
    {
        // TODO: NSwag generated Clients are Causing AntiForgeryToken related Errors
        // var authResult = await Client.AuthenticateAsync(UserAuthenticateRequest);
        var result = await AccountClient.AuthenticateAsync(UserAuthenticateRequest);
        
        if (result!.Errors.Any())
        {
            // TODO: Add error handling
            return;
        }
        HttpContextAccessor.HttpContext!.Response.Cookies.Append("access-token", result.Data!.Token, new CookieOptions
        {
            // TODO: Add Expiration to result
        });

        //Navigate to home
        NavigationManager.NavigateTo("/");
    }
}
