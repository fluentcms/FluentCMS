<Page>
    <PageHeader HasBack="true"
                Title="ContentType Detail">
    </PageHeader>
    <PageBody>
        <Grid Gutter="GridGutter.Large">
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Seven"
                      Large="GridItemColumn.Nine">
                <Grid Gutter="GridGutter.Large" JustifySmall="GridJustify.End">
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography Weight="TextWeight.Bold">
                            Title:
                        </Typography>
                        <Typography>
                            @model.Title
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography Weight="TextWeight.Bold">
                            Slug:
                        </Typography>
                        <Typography>
                            @model.Slug
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography Weight="TextWeight.Bold">
                            Description:
                        </Typography>
                        <Typography>
                            @model.Description
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography Weight="TextWeight.Bold">
                            Fields:
                        </Typography>
                        <Table>
                            <TableHead>
                                <TableCell>
                                    Slug
                                </TableCell>
                                <TableCell>
                                    Title
                                </TableCell>
                                <TableCell>
                                    Type
                                </TableCell>
                            </TableHead>
                            <TableBody>
                                @foreach (var field in fields)
                                {
                                    <TableRow>
                                        <TableCell>
                                            @field.Slug
                                        </TableCell>
                                        <TableCell>
                                            @field.Title
                                        </TableCell>
                                        <TableCell>
                                            @ContentTypeFields.ContentTypeFieldExplorer.Find(field!.FieldType)?.Title
                                        </TableCell>
                                    </TableRow>
                                }
                            </TableBody>

                        </Table>

                    </GridItem>
                </Grid>
            </GridItem>
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Five"
                      Large="GridItemColumn.Three">
                <Card>
                    <CardBody>
                        @if (!string.IsNullOrEmpty(model.CreatedBy))
                        {
                            <Typography Weight="TextWeight.Bold">
                                Created By
                            </Typography>
                            <Typography>
                                @model.CreatedBy
                            </Typography>
                            <Spacer />
                        }

                        @if (model.CreatedAt != null)
                        {
                            <Typography Weight="TextWeight.Bold">
                                Created At
                            </Typography>
                            <Typography>
                                @model.CreatedAt
                            </Typography>
                            <Spacer />
                        }

                        @if (!string.IsNullOrEmpty(model.ModifiedBy))
                        {
                            <Typography Weight="TextWeight.Bold">
                                Modified By
                            </Typography>
                            <Typography>
                                @model.ModifiedBy
                            </Typography>
                            <Spacer />
                        }

                        @if (model.ModifiedAt != null)
                        {
                            <Typography Weight="TextWeight.Bold">
                                Modified At
                            </Typography>
                            <Typography>
                                @model.ModifiedAt
                            </Typography>
                            <Spacer />
                        }
                    </CardBody>
                </Card>
                <Spacer />
                <Button Block="true"
                        Color="Color.Primary"
                        Href="@NavigationManager.Plugin("ContentType Management", "Update ContentType", new { id = model.Id })"
                        Item="true"
                        Outline="true">
                    <Icon Name="IconName.Edit" />
                    Edit
                </Button>
                <Spacer Size="SpacerSize.Small" />
                <Button Block="true"
                        Color="Color.Danger"
                        Item="true"
                        Outline="true"
                        OnClick="OnDelete">
                    <Icon Name="IconName.Edit" />
                    Delete
                </Button>
            </GridItem>
        </Grid>
    </PageBody>
</Page>

@code {
    [Inject]
    ConfirmService Confirm { set; get; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    ContentTypeDetailResponse model { get; set; } = new();

    List<ContentTypeFieldResponse> fields { get; set; } = new();

    async Task OnDelete()
    {
        var result = await Confirm.Show("Are you sure to remove this ContentType?");

        if (!result) return;

        await ContentTypeClient.DeleteAsync(model.Id);

        NavigationManager.NavigateTo(NavigationManager.Plugin("ContentType Management", "ContentTypes List"));
    }

    protected override async Task OnInitializedAsync()
    {
        var contentTypeId = NavigationManager.GetIdFromQuery();

        if (contentTypeId == null) return;

        model = (await ContentTypeClient.GetByIdAsync(contentTypeId ?? Guid.Empty)).Data;

        if (model == null) return;

        fields = model.Fields?.ToList() ?? new();
    }
}
