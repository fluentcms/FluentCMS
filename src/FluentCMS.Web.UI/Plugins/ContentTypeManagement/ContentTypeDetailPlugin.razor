<Page>
    <PageHeader HasBack="true"
                Title="ContentType Detail">
    </PageHeader>
    <PageBody>
        <Grid Gutter="GridGutter.Large">
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Seven"
                      Large="GridItemColumn.Nine">
                <Grid Gutter="GridGutter.Large" JustifySmall="GridJustify.End">
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography><strong>Title:</strong></Typography>
                        <Typography>
                            @View.Title
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <Typography><strong>Slug:</strong></Typography>
                        <Typography>
                            @View.Slug
                        </Typography>
                    </GridItem>
                    <GridItem Small="GridItemColumn.Twelve">
                        <ButtonGroup>
                            @if (View != null && App != null)
                            {
                                <p>Delete</p>
                                <Button Color="Color.Primary"
                                        Href="@($"?PluginDef=ContentType Management&typeName=Update ContentType&id={View.Id}&appSlug={App?.Slug}")">
                                    <Icon Name="IconName.Edit" />
                                    Edit
                                </Button>
                            }
                        </ButtonGroup>
                    </GridItem>
                </Grid>
            </GridItem>
            <GridItem Small="GridItemColumn.Twelve"
                      Medium="GridItemColumn.Five"
                      Large="GridItemColumn.Three">
                <Card>
                    <CardBody>
                        @if(!string.IsNullOrEmpty(View.CreatedBy))
                        {
                            <Typography><strong>Created By</strong></Typography>
                            <Typography>@View.CreatedBy</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.CreatedAt.ToString()))
                        {
                            <Typography><strong>Created At</strong></Typography>
                            <Typography>@View.CreatedAt</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.ModifiedBy))
                        {
                            <Typography><strong>Modified By</strong></Typography>
                            <Typography>@View.ModifiedBy</Typography>
                            <Spacer />
                        }
                        @if(!string.IsNullOrEmpty(View.ModifiedAt.ToString()))
                        {
                            <Typography><strong>Modified At</strong></Typography>
                            <Typography>@View.ModifiedAt</Typography>
                        }
                    </CardBody>
                </Card>
            </GridItem>
        </Grid>
    </PageBody>
</Page>

@code {
    [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    Guid? Id { get; set; }

    string? Message { get; set; }

    AppDetailResponse App { get; set; } = new();

    ContentTypeDetailResponse View { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        var appSlug = NavigationManager.GetAppSlugFromQuery();

        var contentTypeId = NavigationManager.GetIdFromQuery();
        if (contentTypeId != null)
            try
            {
                // View = (await ContentTypeClient.GetAsync(appSlug, contentTypeId.Value)).Data;
                View = (await ContentTypeClient.GetAllAsync(appSlug))?.Data.ToList().Find(x => x.Id == contentTypeId);
                App = (await AppClient.GetBySlugAsync(appSlug)).Data;
            }
            catch (Exception)
            {
                Message = "An error occured!";
            }
    }
}
