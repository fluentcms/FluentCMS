@using FluentCMS.Web.Api.ValueConverters

@namespace FluentCMS.Web.UI.Plugins.ContentTypeManagement.ContentTypeFields

<Modal Open="Open"
       Size="ModalSize.Large"
       OnClose="() => OnCancel.InvokeAsync()">
    @if (Open && Model != null)
    {
        <Form Model="@Model"
              OnSubmit="OnFormSubmit">
            <ModalHeader Closable="true">
                @if (!editing && type != null)
                {
                    <Button Color="Color.Primary"
                            Ghost="true"
                            Icon="true"
                            Size="ButtonSize.Small"
                            OnClick="Back">
                        <Icon Name="IconName.Previous" />
                    </Button>
                    <span>&nbsp;&nbsp;</span>
                }
                <ModalTitle id="contentTypeFieldModalTitle">
                    @title
                </ModalTitle>
            </ModalHeader>
            @if (type == null && !editing)
            {
                <ModalBody>
                    <Typography Size="TextSize.Large">
                        Select a field for your collection type
                    </Typography>
                    <ContentTypeFieldSelector @bind-Type="type" />
                </ModalBody>
            }
            else
            {
                <ModalBody>
                    <CascadingValue Value="Model">
                        <CascadingValue Value="editing" Name="EditingMode">
                            <Tabs @bind-Value="tab">
                                <TabsList>
                                    <TabsTab id="contentTypeFieldModalBasicTab"
                                             Name="tab-basic">
                                        Basic
                                    </TabsTab>
                                    <TabsTab id="contentTypeFieldModalAdvancedTab"
                                             Name="tab-advanced">
                                        Advanced
                                    </TabsTab>
                                </TabsList>
                                <TabsPanels>
                                    <TabsPanel Name="tab-basic">
                                        <DynamicComponent Type="type.BasicSettings"></DynamicComponent>
                                    </TabsPanel>
                                    <TabsPanel Name="tab-advanced">
                                        <DynamicComponent Type="type.AdvancedSettings"></DynamicComponent>
                                    </TabsPanel>
                                </TabsPanels>
                            </Tabs>
                        </CascadingValue>
                    </CascadingValue>
                </ModalBody>
                <ModalFooter>
                    <ButtonGroup>
                        <Button Color="Color.Primary"
                                id="contentTypeFieldModalSubmitButton"
                                Type="ButtonType.Submit">
                            Submit
                        </Button>
                        <Button id="contentTypeFieldModalCancelButton"
                                OnClick="() => OnCancel.InvokeAsync()">
                            Cancel
                        </Button>
                    </ButtonGroup>
                </ModalFooter>
            }
        </Form>
    }
</Modal>

@code {
    [Parameter]
    public ContentTypeFieldResponse? Model { get; set; }

    [Parameter]
    public bool Open { get; set; } = false;

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<ContentTypeFieldSetRequest> OnSubmit { get; set; }

    bool editing;

    string tab = "tab-basic";

    Base? type;

    string title
    {
        get
        {
            if (editing) return "Edit Field";
            if (type == null) return "Article";
            return "Add Field";
        }
    }

    void Back()
    {
        type = null;

        tab = "tab-basic";
    }

    void OnFormSubmit()
    {
        Model.FieldType = type.Key;

        OnSubmit.InvokeAsync(new()
            {
                Slug = Model.Slug,
                Title = Model.Title,
                Description = Model.Description,
                Label = Model.Label,
                Placeholder = Model.Placeholder,
                Hint = Model.Hint,
                DefaultValue = Model.DefaultValue,
                IsRequired = Model.IsRequired,
                IsPrivate = Model.IsPrivate,
                FieldType = Model.FieldType,
                Metadata = Model.Metadata,
            });
    }

    protected override void OnParametersSet()
    {
        if (!Open) return;

        editing = Model != null;

        tab = "tab-basic";

        type = editing ? ContentTypeFieldExplorer.Load().FirstOrDefault(x => x.Key == Model.FieldType) : null;

        if (editing)
        {
            Model = new ContentTypeFieldResponse
                {
                    Slug = Model.Slug,
                    Title = Model.Title,
                    Description = Model.Description,
                    Label = Model.Label,
                    Placeholder = Model.Placeholder,
                    Hint = Model.Hint,
                    DefaultValue = Model.DefaultValue.MapValue(),
                    IsRequired = Model.IsRequired,
                    IsPrivate = Model.IsPrivate,
                    FieldType = Model.FieldType,
                    Metadata = Model.Metadata?.Select(x => new KeyValuePair<string, object>(x.Key, x.Value.MapValue())).ToDictionary(),
                };
        }
        else
        {
            Model ??= new()
                {
                    Slug = "",
                    Title = "",
                    Description = "",
                    Label = "",
                    Placeholder = "",
                    Hint = "",
                    DefaultValue = null,
                    IsRequired = false,
                    IsPrivate = false,
                    FieldType = "",
                    Metadata = null,
                };
        }
    }
}
