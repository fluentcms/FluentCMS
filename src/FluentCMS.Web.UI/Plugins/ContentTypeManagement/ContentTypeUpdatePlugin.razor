<Page>
    <PageHeader HasBack="true"
                Title="Update ContentType">
    </PageHeader>
    <PageBody>
        <Grid Gutter="GridGutter.Medium">
            <GridItem Small="GridItemColumn.Twelve">
                <Form Model="@Model"
                      OnSubmit="OnSubmit">
                    <Card>
                        <CardBody>
                            <Select @bind-Value="AppSlug"
                                    Disabled="true"
                                    Label="App"
                                    Name="App"
                                    Placeholder="Choose App..."
                                    Required="true">
                                @foreach (var app in Apps)
                                {
                                    <Option Value="@app.Slug">@app.Title</Option>
                                }
                            </Select>
                            <Input @bind-Value="@View.Slug"
                                   Disabled="true"
                                   Label="Slug"
                                   Name="Slug"
                                   Placeholder="Enter Slug..." />
                            <Input @bind-Value="Model.Title"
                                   Id="contentTypeUpdateTitleInput"
                                   Label="Title"
                                   Name="Slug"
                                   Placeholder="Enter Title..."
                                   Required="true" />
                            <Textarea @bind-Value="Model.Description"
                                      Id="contentTypeUpdateDescriptionInput"
                                      Label="Description"
                                      Name="Description"
                                      Placeholder="Enter Description..." />
                            <Spacer />
                            <FormField Appearance="FormFieldAppearance.Input" Label="Fields">
                                <Table>
                                    <TableHead>
                                        <TableCell>Slug</TableCell>
                                        <TableCell>Title</TableCell>
                                        <TableCell>Type</TableCell>
                                        <TableCell Width="TableColumnWidth.Small"></TableCell>
                                    </TableHead>
                                    <TableBody>
                                        @foreach (var field in Fields)
                                        {
                                            <TableRow>
                                                <TableCell>
                                                    @field.Slug
                                                </TableCell>
                                                <TableCell>
                                                    @field.Title
                                                </TableCell>
                                                <TableCell>
                                                    Text
                                                </TableCell>
                                                <TableCell>
                                                    <ButtonGroup>
                                                        <Button Ghost="true"
                                                                Size="ButtonSize.Small"
                                                                OnClick="() => OnDeleteField(field.Slug)">
                                                            <Icon Name="IconName.Delete" />
                                                        </Button>
                                                        <Tooltip Placement="TooltipPlacement.Top">Delete</Tooltip>

                                                        <Button Ghost="true"
                                                                Size="ButtonSize.Small"
                                                                OnClick="() => OnEditField(field)">
                                                            <Icon Name="IconName.Edit" />
                                                        </Button>
                                                        <Tooltip Placement="TooltipPlacement.Top">Edit</Tooltip>
                                                    </ButtonGroup>
                                                </TableCell>
                                            </TableRow>
                                        }
                                        <TableRow>
                                            <TableCell colspan="4">
                                                <Button Color="Color.Primary"
                                                        Ghost="true"
                                                        OnClick="OpenAddFieldModal">
                                                    <Icon Name="IconName.Plus" />
                                                    Add Field
                                                </Button>
                                            </TableCell>
                                        </TableRow>
                                    </TableBody>
                                </Table>

                            </FormField>
                            @if (!string.IsNullOrEmpty(Message))
                            {
                                <Typography>
                                    @Message
                                </Typography>
                                <Spacer />
                            }
                            <ButtonGroup>
                                <Button id="contentTypeUpdateCancelButton" 
                                        OnClick="GoBack">
                                    Cancel
                                </Button>
                                <Button Color="Color.Primary"
                                        id="contentTypeUpdateSubmitButton"
                                        Type="ButtonType.Submit">
                                    Save
                                </Button>
                            </ButtonGroup>
                        </CardBody>
                    </Card>
                </Form>
            </GridItem>
        </Grid>
    </PageBody>
</Page>

<ContentTypeFieldModal ActiveTab="tab-general"
                       Model="FieldModel"
                       Open="FieldModalOpen"
                       Title="@FieldModalTitle"
                       OnCancel="CloseFieldModal"
                       OnSubmit="OnSubmitField" />

@code {
    [Inject]
    AppClient AppClient { get; set; } = default!;

    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    ConfirmService Confirm { set; get; } = default!;

    [Inject]
    IJSRuntime JsRuntime { set; get; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    List<AppDetailResponse> Apps { get; set; } = [];

    List<ContentTypeField> Fields { get; set; } = [];

    string? AppSlug { get; set; }

    bool FieldModalOpen = false;

    ContentTypeField FieldModel = new();

    string? FieldModalTitle;

    Guid? Id { get; set; }

    string? Message { get; set; }

    ContentTypeDetailResponse View { get; set; } = new();

    ContentTypeUpdateRequest Model { get; set; } = new();

    void CloseFieldModal()
    {
        FieldModalOpen = false;
    }

    async Task GoBack()
    {
        NavigationManager.NavigateTo("/admin/content-types?appSlug=" + AppSlug);
    }

    async Task OnEditField(ContentTypeField field)
    {
        FieldModel = new ContentTypeField
            {
                Slug = field.Slug,
                Title = field.Title,
                Description = field.Description,

                IsRequired = field.IsRequired,
                Label = field.Label,
                Hint = field.Hint,
                Placeholder = field.Placeholder,
                DefaultValue = field.DefaultValue,

            };
        FieldModalTitle = "Edit Field";
        FieldModalOpen = true;
    }

    async Task OnDeleteField(string fieldName)
    {
        var result = await Confirm.Show("Are you sure to remove this Field?");

        if (result)
        {
            var response = await ContentTypeClient.DeleteFieldAsync(AppSlug, View.Id, fieldName);

            if (response?.Data != null)
            {
                Fields = (response.Data.Fields ?? []).ToList();
            }
        }
    }

    void OpenAddFieldModal()
    {
        FieldModel = new ContentTypeField
            {
                Slug = "",
                Title = "",
                Description = "",

                IsRequired = false,
                Label = "",
                Hint = "",
                Placeholder = "",
                DefaultValue = "",
            };

        FieldModalTitle = "Add Field";
        FieldModalOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        Id = NavigationManager.GetIdFromQuery();
        AppSlug = NavigationManager.GetAppSlugFromQuery();

        var appResponse = await AppClient.GetAllAsync();

        if (appResponse?.Data != null)
        {
            Apps = appResponse.Data.ToList();
        }

        var response = await ContentTypeClient.GetByIdAsync(Id!.Value, AppSlug!);

        if (response?.Data != null)
        {
            View = response.Data;
            Fields = (View.Fields ?? []).ToList();

            Model.Id = View.Id;
            Model.Title = View.Title;
            Model.AppId = View.AppId;
            Model.Description = View.Description;
        }
    }

    async Task OnSubmitField(ContentTypeField field)
    {
        FieldModalOpen = false;
        var response = await ContentTypeClient.SetFieldAsync(AppSlug, View.Id, field);

        if (response?.Data != null)
        {
            Fields = response.Data.Fields.ToList();
        }
    }

    async Task OnSubmit()
    {
        try
        {
            var updatedContentType = await ContentTypeClient.UpdateAsync(AppSlug, Model);
            Message = "Done!";
            await GoBack();
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }
}
