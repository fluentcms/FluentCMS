<PluginBody Title="Update ContentType">
    <Grid Gutter="GridGutter.Medium">
        <GridItem Small="GridItemColumn.Twelve">
            <Form Model="@Model"
                    OnSubmit="OnSubmit">
                <Card>
                    <CardBody>
                        <Input @bind-Value="@View.Slug"
                                Disabled="true"
                                Label="Slug"
                                Name="Slug"
                                Placeholder="Enter Slug..." />
                        <Input @bind-Value="Model.Title"
                                Id="contentTypeUpdateTitleInput"
                                Label="Title"
                                Name="Slug"
                                Placeholder="Enter Title..."
                                Required="true" />
                        <Textarea @bind-Value="Model.Description"
                                    Id="contentTypeUpdateDescriptionInput"
                                    Label="Description"
                                    Name="Description"
                                    Placeholder="Enter Description..." />
                        <Spacer />
                        <div>
                            <Typography Size="TextSize.Small"
                                        Weight="TextWeight.Medium">
                                Fields
                            </Typography>
                            @* TODO: this Button and DataTable are not tested yet *@
                            <Button Color="Color.Primary"
                                    Ghost="true"
                                    @onclick="OpenAddFieldModal">
                                <Icon Name="IconName.Plus" />
                                Add Field
                            </Button>
                            <DataTable Items="Fields">
                                <DataTableItem Label="Slug">@context.Slug</DataTableItem>
                                <DataTableItem Label="Title">@context.Title</DataTableItem>
                                <DataTableItem Label="Type">Text</DataTableItem>
                                <DataTableItem>
                                    <div class="flex gap-2">
                                        <Button Color="Color.Primary" Outline="true" Size="ButtonSize.Small">
                                            <Icon Name="IconName.Edit" />Edit
                                        </Button>
                                        <Button Color="Color.Danger" Outline="true" Size="ButtonSize.Small">
                                            <Icon Name="IconName.Delete" />Delete
                                        </Button>
                                    </div>
                                </DataTableItem>
                            </DataTable>
                        </div>
                        @if (!string.IsNullOrEmpty(Message))
                        {
                            <Spacer />
                            <Typography>
                                @Message
                            </Typography>
                        }
                    </CardBody>
                    <CardActions>
                        <Button id="contentTypeUpdateCancelButton" @onclick="GoBack">
                            Cancel
                        </Button>
                        <Button Color="Color.Primary"
                                id="contentTypeUpdateSubmitButton"
                                Type="ButtonType.Submit">
                            Save
                        </Button>
                    </CardActions>
                </Card>
            </Form>
        </GridItem>
    </Grid>
</PluginBody>

<FluentCMS.Web.UI.Plugins.ContentTypeManagement.ContentTypeFields.ContentTypeFieldModal Open="FieldModalOpen"
                                                                                        Model="FieldModel"
                                                                                        OnCancel="OnCancelField"
                                                                                        OnSubmit="OnSubmitField" />

@code {
    [Inject]
    ContentTypeClient ContentTypeClient { get; set; } = default!;

    [Inject]
    ConfirmService Confirm { set; get; } = default!;

    [Inject]
    IJSRuntime JsRuntime { set; get; } = default!;

    [Inject]
    NavigationManager NavigationManager { set; get; } = default!;

    List<ContentTypeField> Fields { get; set; } = [];

    bool FieldModalOpen = false;

    ContentTypeField? FieldModel;

    string? FieldModalTitle;

    Guid? Id { get; set; }

    string? Message { get; set; }

    ContentTypeDetailResponse View { get; set; } = new();

    ContentTypeUpdateRequest Model { get; set; } = new();

    async Task GoBack()
    {
        NavigationManager.NavigateTo("/admin/content-types");
    }

    async Task OnEditField(ContentTypeField field)
    {
        FieldModel = new ContentTypeField
        {
            DefaultValue = field.DefaultValue,
            Description = field.Description,
            Hint = field.Hint,
            IsRequired = field.IsRequired,
            Label = field.Label,
            Placeholder = field.Placeholder,
            Slug = field.Slug,
            Title = field.Title,

        };
        FieldModalOpen = true;
    }

    async Task OnDeleteField(string fieldName)
    {
        var result = await Confirm.Show("Are you sure to remove this Field?");

        if (result)
        {
            var response = await ContentTypeClient.DeleteFieldAsync(View.Id, fieldName);

            if (response?.Data != null)
            {
                Fields = (response.Data.Fields ?? []).ToList();
            }
        }
    }

    void OpenAddFieldModal()
    {
        FieldModel = null;
        FieldModalOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        Id = NavigationManager.GetIdFromQuery();

        var response = await ContentTypeClient.GetByIdAsync(Id!.Value);

        if (response?.Data != null)
        {
            View = response.Data;
            Fields = (View.Fields ?? []).ToList();
            Model.Id = View.Id;
            Model.Title = View.Title;
            Model.Description = View.Description;
        }
    }

    void OnCancelField()
    {
        FieldModalOpen = false;
    }

    async Task OnSubmitField(ContentTypeField field)
    {
        FieldModalOpen = false;
        var response = await ContentTypeClient.SetFieldAsync(View.Id, field);

        if (response?.Data != null)
        {
            Fields = response.Data.Fields.ToList();
        }
    }

    async Task OnSubmit()
    {
        try
        {
            var updatedContentType = await ContentTypeClient.UpdateAsync(Model);
            Message = "Done!";
            await GoBack();
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }
}
