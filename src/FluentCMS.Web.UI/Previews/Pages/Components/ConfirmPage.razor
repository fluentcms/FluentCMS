@page "/previews/components/confirm"
@layout ComponentsLayout
@rendermode InteractiveServer

<PageHeader HasBack Title="Confirm" />

<Preview Title="Default">
    <Description>
        You can use this modal example to show a pop-up decision dialog to your users especially
        when deleting an item and making sure if the user really wants to do that by double confirming.
    </Description>
    <ChildContent>
        <Grid ItemsSmall=GridItemsEnum.Center JustifySmall=GridJustifyEnum.Center>
            <GridItem>
                <Confirm @bind-Open=Open1 Message="Are you sure you want to delete this product?" />
                <Button OnClick="() => Open1 = !Open1">Open</Button>
            </GridItem>
        </Grid>
    </ChildContent>
</Preview>

<Preview Title="Static">
    <Description>
        You can not close confirm dialog by click outside.
    </Description>
    <ChildContent>
        <Grid ItemsSmall=GridItemsEnum.Center JustifySmall=GridJustifyEnum.Center>
            <GridItem>
                <Confirm @bind-Open=Open2 Message="Are you sure you want to delete this product?" Static/>
                <Button OnClick="() => Open2 = !Open2">Open</Button>
            </GridItem>
        </Grid>
    </ChildContent>
</Preview>

<Preview Title="Service">
    <Description>
        Confirmation modal can open with the ConfirmService as well.
    </Description>
    <ChildContent>
        <Grid ItemsSmall=GridItemsEnum.Center JustifySmall=GridJustifyEnum.Center>
            <GridItem>
                <Button OnClick=OpenByService>Open</Button>
            </GridItem>
        </Grid>
    </ChildContent>
</Preview>

 @code {
    [Inject]
    ConfirmService ConfirmService { get; set; } = default!;

    private bool Open1 { get; set; } = false;

    private bool Open2 { get; set; } = false;

    async Task OpenByService()
    {
        var Result = await ConfirmService!.Show("Are you sure you want to delete this product?");
    }
}
