@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@if (!BlockRender)
{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        @* These lines should be here to avoid ui flickering *@
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>FluentCMS</title>
        <link rel="stylesheet" href="/_content/FluentCMS.Web.UI.Components/css/app.min.css" />
        <link rel="icon" type="image/png" href="favicon.png" />
        <base href="/" />

        <HeadOutlet @rendermode="RenderMode" />
    </head>
    <body>
        <Routes @rendermode="RenderMode" />
        <script src="_framework/blazor.web.js"></script>
    </body>
    </html>
}

@code {
    [Inject] SetupClient SetupClient { get; set; }
    [CascadingParameter] public HttpContext HttpContext { get; set; } = default!;
    [Inject] NavigationManager NavigationManager { get; set; }

    private readonly string[] _staticRenderModePaths = ["/auth"];

    public bool Initialized { get; set; } = false;

    public bool BlockRender = true;

    public IComponentRenderMode? RenderMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Initialized = (await SetupClient.IsInitializedAsync()).Data;
        RenderMode = (!_staticRenderModePaths.Any(x => HttpContext.Request.Path.StartsWithSegments(x, StringComparison.OrdinalIgnoreCase)) && Initialized) ? InteractiveServer : null;
        BlockRender = false; // todo find a better solution for this
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (HttpContext == null && RenderMode == null)
        {
            NavigationManager.Refresh(true);
        }
        else
        {
            
            //Clean up previous invalid cookie
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }
    }
}
