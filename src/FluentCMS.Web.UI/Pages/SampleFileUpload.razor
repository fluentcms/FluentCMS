@page "/admin/fileupload"
@inject HttpClient _httpClient
@using System.Net.Http.Headers

<h3>Sample File Upload</h3>

<div>
    <div class="mb-3">
        <label class="form-label">Site:</label>
        <select class="form-control" @onchange="OnSiteSelectChanged" required>
            <option>Select a site</option>
            @foreach (var site in sites)
            {
                <option value="@site.Id">@site.Name</option>
            }
        </select>
        <div>site: @selectedSite</div>
    </div>
    <div class="mb-3">
        <label class="form-label">Sub Directory: (leave empty for root dir)</label>
        <select class="form-control" @onchange="e => selectedDirectory = e.Value != null ? e.Value.ToString() : string.Empty" required>
            <option value="">Root dir</option>
            @foreach (var site in sites)
            {
                <option value="@site.Id">@site.Name</option>
            }
        </select>
        <div>dir: @selectedDirectory</div>
    </div>
    <div class="mb-3">
        <label>
            Upload up to @maxAllowedFiles files:
            <InputFile OnChange="@OnInputFileChange" multiple />
        </label>
    </div>
</div>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        File: @file.Name

                        @if (FileUpload(uploadResults, file.Name, out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                        }
                        else
                        {
                            <span>
                                There was an error uploading the file
                                (Error: @result.Error).
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private string? selectedSite;
    private string? selectedDirectory;
    private IEnumerable<SiteResponse> sites = new List<SiteResponse>();
    private Dictionary<Guid, string> siteFolders = new Dictionary<Guid, string>();
    private List<File> files = new();
    private List<UploadedFile> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;
    private string? message;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        shouldRender = false;
        var getSitesResponse = await _httpClient.GetFromJsonAsync<ApiPagingResult<SiteResponse>>("site/getAll");
        if (getSitesResponse != null)
        {
            sites = getSitesResponse!.Data!;
        }
        shouldRender = true;
    }

    private async Task OnSiteSelectChanged(ChangeEventArgs e)
    {
        if (e.Value == null || string.IsNullOrWhiteSpace(e.Value.ToString()))
            return;

        shouldRender = false;
        selectedSite = e.Value.ToString();
        var getSiteAssetsResponse = await _httpClient.GetFromJsonAsync<ApiResult<IEnumerable<AssetResponse>>>("assets/GetAllSiteAssets/" + selectedSite);
        if (getSiteAssetsResponse != null)
        {
            var assets = getSiteAssetsResponse!.Data!.Where(x => x.Type == Entities.AssetType.Folder);
            siteFolders.Clear();
            foreach (var a in assets)
            {
                var folderName = a.Name;
                var parentFolderId = a.FolderId;
                while (parentFolderId.HasValue)
                {
                    var parentFolder = assets.Single(x => x.Id == parentFolderId.Value);
                    folderName = parentFolder.Name + "/" + folderName;
                    parentFolderId = parentFolder.FolderId;
                }
                siteFolders.Add(a.Id, folderName);
            }
        }
        shouldRender = true;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 600; // 600kb
        var upload = false;
        uploadResults.Clear();
        files.Clear();

        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(selectedSite!.ToString()), "siteId");
        content.Add(new StringContent(selectedDirectory!.ToString()), "directory");

        if (e.FileCount > maxAllowedFiles)
        {
            message = $"Try again with no more than {maxAllowedFiles} files.";
        }
        else
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                if (uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
                {
                    try
                    {
                        files.Add(new() { Name = file.Name });

                        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                        content.Add(
                            content: fileContent,
                            name: "\"files\"",
                            fileName: file.Name);

                        upload = true;
                    }
                    catch (Exception ex)
                    {
                        uploadResults.Add(new()
                            {
                                FileName = file.Name,
                                Error = "{FileName} not uploaded (Err: 5): {Message}",
                                Successful = false
                            });
                    }
                }
            }

            message = string.Empty;
        }

        if (upload)
        {
            var response = await _httpClient.PostAsync("Assets/Upload", content);
            if (response.IsSuccessStatusCode)
            {
                var options = new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };

                using var responseStream = await response.Content.ReadAsStreamAsync();
                var newUploadResults = await System.Text.Json.JsonSerializer.DeserializeAsync<IList<FluentCMS.Api.Models.UploadedFile>>(responseStream, options);
                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }
            else
            {
                message = await response.Content.ReadAsStringAsync();
            }
        }

        shouldRender = true;
    }

    private static bool FileUpload(IList<UploadedFile> uploadResults,
        string? fileName, out UploadedFile result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        return result.Successful;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}
