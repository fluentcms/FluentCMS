﻿@page "/{*Route:nonfile}"
@using System.Text.RegularExpressions
@using System.Web
@inject HttpClient http
@inject NavigationManager Navigator

<PageTitle>@Page?.Title</PageTitle>

@dynamicComponent()

@code {
    [Parameter]
    public string? Route { get; set; }

    public SiteResponse? Site { get; set; }
    public PageResponse? Page { get; set; }
    public string Layout { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
       
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var host = Navigator.BaseUri;
        if (host.EndsWith("/"))
            host = host.Substring(0, host.Length - 1);

        var siteResult = http.GetFromJsonAsync<ApiResult<SiteResponse>>($"Site/GetByUrl?url={host}").GetAwaiter().GetResult();
        Site = siteResult?.Data;

        if (Site is null)
            return;

        if (Route is null)
            Route = string.Empty;

        var query = HttpUtility.ParseQueryString(string.Empty);
        query["siteId"] = Site.Id.ToString();
        query["path"] = Route;

        var pageResult = http.GetFromJsonAsync<ApiResult<PageResponse>>($"Page/GetByPath?{query.ToString()}").GetAwaiter().GetResult();
        Page = pageResult?.Data;
        if (Page is null)
            return;

        Layout = Page.Layout?.Content ?? Site.Layout.Content;
    }

    RenderFragment dynamicComponent() => builder =>
       {
           var mcol = Regex.Matches(Layout, @"\[\[.*?]]").ToDictionary(x => x.ToString(), x => x.Index);

           var index = 0;
           var startIndex = 0;
           var lastIndex = 0;
           var lastLength = 0;
           foreach (var key in mcol.Keys)
           {
               builder.AddMarkupContent(index, Layout.Substring(startIndex, mcol[key] - startIndex));
               startIndex = mcol[key] + key.Length;
               index++;
               var name = key.Replace("[[", "").Replace("]]", "").Split(" ")[1];
               builder.OpenComponent<Section>(index);
               name = name.Replace("name=", string.Empty).Replace("\"", string.Empty);
               builder.AddComponentParameter(0, "name", name);
               builder.AddComponentParameter(1, "page", Page);
               builder.CloseComponent();
               index++;
               lastIndex = mcol[key];
               lastLength = key.Length;
           }
           builder.AddMarkupContent(index, Layout.Substring(lastIndex + lastLength));
           index++;
       };
}
