@page "/admin/roles"
@inject RoleClient RoleClient

<h3>Roles</h3>
<p>List of all roles.</p>
<NavigationButton To="/admin/roles/create">Create</NavigationButton>

@if (roles == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var role in roles)
            {
                <tr>
                    <td>@role.Name</td>
                    <td>@role.Description</td>
                    <td>
                        <NavigationButton To="@("/admin/roles/update/" + role.Id)">Edit</NavigationButton>
                        <Button @onclick="() => OnDeleteClick(role.Id)">Delete</Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<UI.RoleDto>? roles;

    private async Task LoadRoles()
    {
        try
        {
            // TODO: mission SiteId
            var response = await RoleClient.GetAllAsync(new UI.SiteIdRequest{});
            if (response != null)
            {
                roles = response!.Data;
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task OnDeleteClick(Guid id)
    {
        try
        {
            //TODO: Missing SiteId
            var response = await RoleClient.DeleteAsync(new UI.IdRequest { Id = id });
            if (response != null)
            {
                await LoadRoles();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
