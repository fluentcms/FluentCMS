@page "/admin/roles/create"
@page "/admin/roles/update/{Id:guid}"
@inject RoleClient RoleClient
@inject NavigationManager _navigationManager

<h3>@(Id.HasValue ? "Update" : "Create") Role</h3>

<EditForm Model="data" OnValidSubmit="ValidSubmit">
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText type="text" class="form-control" required @bind-Value="data.Name" name="name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText type="text" class="form-control" required @bind-Value="data.Description" name="description" />
    </div>
    <div class="mb-3">
        <div class="form-check">
            <input class="form-check-input" type="checkbox"
                   id="autoAssigned" name="autoAssigned"
                   @bind-value="data.AutoAssigned"
                   @attributes="addCheckedAttribute(data.AutoAssigned)">
            <label class="form-check-label" for="autoAssigned">AutoAssigned</label>
        </div>
    </div>

    <Button Type="submit" Color="Colors.Primary">Save</Button>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private UI.RoleCreateRequest data = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Id.HasValue)
        {
            try
            {
                // TODO: missing siteId
                var response = await RoleClient.GetByIdAsync(new UI.IdRequest { Id = Id.Value });
                if (response != null)
                {
                    data.Name = response.Data!.Name;
                    data.Description = response.Data!.Description;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    public async Task ValidSubmit()
    {
        //Create
        if (Id.HasValue == false)
        {
            try
            {
                await RoleClient.CreateAsync(data);
                _navigationManager.NavigateTo("/admin/roles");
            }
            catch (Exception)
            {
                throw;
            }
        }
        //Edit
        else
        {
            var editCommand = new UI.RoleUpdateRequest
                {
                    Id = Id.Value,
                    Name = data.Name,
                    Description = data.Description,
                    AutoAssigned = data.AutoAssigned,
                };
            try
            {
                await RoleClient.UpdateAsync(editCommand);
                _navigationManager.NavigateTo("/admin/roles");
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private Dictionary<string, object> addCheckedAttribute(bool isChecked) =>
        new Dictionary<string, object>() { ["checked"] = isChecked };
}
