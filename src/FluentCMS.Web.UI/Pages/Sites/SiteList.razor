@page "/admin/sites"
@inject HttpClient _httpClient;
@inject IJSRuntime _jsRuntime;
@using FluentCMS.Entities

<h3>Sites</h3>
<p>List of all sites.</p>
<NavigationButton To="/admin/sites/create">Create</NavigationButton>
@if (sites == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Urls</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var site in sites)
            {
                <tr>
                    <td>@site.Name</td>
                    <td>@site.Description</td>
                    <td>
                        @foreach (var url in site.Urls)
                        {
                            <a target="_blank" href="@url">@url</a>
                            if (url != site.Urls.Last())
                            {
                                <span>|</span>
                            }
                        }
                    </td>
                    <td>
                        <NavigationButton To="@("/admin/sites/edit/" + site.Id)">Edit</NavigationButton>
                        <NavigationButton To="@("/admin/pages/" + site.Id)">Pages</NavigationButton>
                        <Button Color="Colors.Danger" @onclick="@(()=>Delete(site.Id))">Delete</Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<Api.Models.SiteResponse>? sites;

    public async Task Fetch()
    {
        try
        {
            var response = await _httpClient.GetFromJsonAsync<ApiPagingResult<Api.Models.SiteResponse>>("site/getAll");
            sites = response!.Data;
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Fetch();
    }

    public async Task Delete(Guid id)
    {
        var result = await _jsRuntime.InvokeAsync<bool>("confirm", "Delete site?");
        if (result)
        {
            try
            {
                await _httpClient.DeleteAsync("site/" + id);
                await Fetch();
                StateHasChanged();
            }
            catch (Exception)
            {
                
                throw;
            }
        }
    }
}