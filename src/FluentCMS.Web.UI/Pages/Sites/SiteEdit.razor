@page "/sites/edit/{Id:guid}"
@page "/sites/create"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
<h3>SiteEdit</h3>
<EditForm Model="Site" OnValidSubmit="ValidSubmit">
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText type="text" class="form-control" required @bind-Value="Site.Name" name="name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <textarea class="form-control" @bind="Site.Description" name="description" rows="3"></textarea>
    </div>
    <div class="mb-3">
        <label class="form-label">Role</label>
        <select class="form-select" required @bind="Site.RoleId" name="roleId">
            @foreach (var role in Roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </select>
    </div>
    @* Urls *@
    <div class="mb-3">
        <label class="form-label">Urls (Comma Separated Urls)</label>
        <InputText class="form-control" required @bind-Value="Urls" name="url" rows="3"></InputText>
    </div>

    <Button Type="submit" Color="Colors.Primary">Save</Button>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public Entities.Sites.Site Site { get; set; } = new();

    public string Urls
    {
        get { return string.Join(", ",Site?.Urls); }
        set { Site.Urls = value.Split(['\n',',']).Select(x=>x.Trim()).ToList(); }
    }

    public List<dynamic> Roles { get; set; } = new()
    {
        { new { Id = Guid.Parse("AA0DBDB8-008B-4A8A-8272-47E200BB0A20"), Name = "Admin" } },
        { new { Id = Guid.Parse("AA0DBDB8-008B-4A8A-8272-47E200BB0A21"), Name = "Admin2" } },
    };
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Id == null)
        {
            return;
        }
        try
        {
            var response = (await _httpClient.GetFromJsonAsync<ApiResult<Entities.Sites.Site>>($"site/{Id.Value}"))!;
            if (response != null && response.IsSuccess)
            {
                Site = response.Data!;
            }
        }
        catch (Exception)
        {

            throw;
        }

    }
    public async Task ValidSubmit()
    {
        //Create
        // if (Id == null)
        // {
        //     var createCommand = new Application.Sites.CreateSiteCommand()
        //         {
        //             Name = Site.Name,
        //             Description = Site.Description,
        //             RoleId = Site.RoleId,
        //             URLs = Site.Urls.ToArray()
        //         };
        //     try
        //     {
        //         await _httpClient.PostAsJsonAsync<Application.Sites.CreateSiteCommand>($"site", createCommand);
        //         _navigationManager.NavigateTo("/sites");
        //     }
        //     catch (Exception)
        //     {

        //         throw;
        //     }
        // }
        // //Edit
        // else
        // {
        //     var editCommand = new Application.Sites.EditSiteCommand()
        //         {
        //             Id = Id.Value,
        //             Name = Site.Name,
        //             Description = Site.Description,
        //             RoleId = Site.RoleId,
        //             URLs = Site.Urls.ToArray()
        //         };
        //     try
        //     {
        //         await _httpClient.PatchAsJsonAsync<Application.Sites.EditSiteCommand>($"site", editCommand);
        //         _navigationManager.NavigateTo("/sites");
        //     }
        //     catch (Exception)
        //     {

        //         throw;
        //     }
        // }
    }
}
