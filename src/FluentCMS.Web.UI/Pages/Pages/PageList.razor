@page "/admin/pages/{SiteId:guid}"
@page "/admin/pages/{SiteId:guid}/{ParentId:guid}"
@inject PageClient _pageClient
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime;

<h3>Pages</h3>
<p>List of pages for site:@SiteId parent:@ParentId</p>
<NavigationButton To="@(ParentId == null ?  $"/admin/pages/create/{SiteId}" : $"/admin/pages/create/{SiteId}/{ParentId}")">Create</NavigationButton>
@if (pages == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Path</th>
                <th>Operations</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in pages)
            {
                <tr>
                    <td>@p.Title</td>
                    <td>@p.Path</td>
                    <td>
                        <NavigationButton To="@("/admin/pages/edit/" + p.Id)">Edit</NavigationButton>
                        <NavigationButton To="@($"/admin/pages/{SiteId}/" + p.Id)">Children</NavigationButton>
                        <Button Color="Colors.Danger" @onclick="@(()=>Delete(p.Id))">Delete</Button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid SiteId { get; set; }
    [Parameter]
    public Guid? ParentId { get; set; }
    private IEnumerable<UI.PageResponse>? pages;

    public async Task Fetch()
    {
        try
        {
            var response = await _pageClient.GetAllAsync(new UI.PageSearchRequest { SiteId = SiteId });
            pages = response?.Data;
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Fetch();
    }

    public async Task Delete(Guid id)
    {
        var result = await _jsRuntime.InvokeAsync<bool>("confirm", "Delete site?");
        if (result)
        {
            try
            {
                await _pageClient.DeleteAsync(id);
                await Fetch();
                StateHasChanged();
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}
