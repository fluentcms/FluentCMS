@inherits BaseComponent

<div class=@this.GetClasses() @attributes=@AdditionalAttributes tabindex="-1">

    @* TODO: It is removed after enabling the JS invoker *@
    @if (Open)
    {
        <div onclick=@Close class="bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0"></div>
    }

    <ConfirmWrapper>
        <ConfirmContent>
            <CloseButton Onclick=@Cancel />

            <ConfirmBody>
                <Icon Name=@IconNameEnum.ExclamationCircle Size=@SizeEnum.Large />

                @* TODO: Replace it with typography component *@
                <h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">
                    @Message
                </h3>

                <ButtonGroup>
                    <Button OnClick=@Confirmation Color=@ColorEnum.Danger>
                        Yes, I'm sure
                    </Button>
                    <Button OnClick=@Cancel>
                        No, cancel
                    </Button>
                </ButtonGroup>
            </ConfirmBody>
        </ConfirmContent>
    </ConfirmWrapper>
</div>

@code {
    [Parameter]
    public string Message { get; set; } = string.Empty;

    [Parameter]
    [CssProperty]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    [CssProperty]
    public bool Static { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancel { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnConfirm { get; set; }

    public async void Cancel()
    {
        Open = false;

        await OpenChanged.InvokeAsync(Open);

        await OnCancel.InvokeAsync();
    }

    public async void Close()
    {
        if (Static) return;

        Open = false;

        await OpenChanged.InvokeAsync(Open);

        await OnCancel.InvokeAsync();
    }

    public async void Confirmation()
    {
        Open = false;

        await OpenChanged.InvokeAsync(Open);

        await OnConfirm.InvokeAsync();
    }
}
