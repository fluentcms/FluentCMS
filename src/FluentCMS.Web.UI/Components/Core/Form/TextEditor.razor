@inherits BaseComponent
@inject IJSRuntime JSRuntime

<HeadContent>
    <link rel="stylesheet" href="/css/quill.snow.css">
    <script src="/js/quill.min.js"></script>
    <script src="/js/quill.blazor.js"></script>

    @* Remove below lines *@
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/" />
    <link rel="stylesheet" href="/css/app.min.css">
    <link rel="icon" type="image/png" href="favicon.png" />
</HeadContent>

<div class=@this.ClassName("TextEditorWrapper")>
    <div class=@this.GetClasses() @ref="Element" @attributes="AdditionalAttributes">
        @* @((MarkupString)Value) *@
    </div>
</div>

@code {
    [Parameter]
    public ElementReference Element { get; set; }

    class QuillOptions
    {
        public string Placeholder { get; set; }
        public bool ReadOnly { get; set; }
        @* Add more... *@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.createQuill", DotNetObjectReference.Create(this), Element, new QuillOptions()
                {
                    Placeholder = Placeholder,
                    ReadOnly = Readonly
                });
        }
        else
        {
            if (ShouldUpdate)
            {
                await JSRuntime.InvokeVoidAsync("QuillFunctions.setQuillContent", Element, Value);
            }
            else
            {
                ShouldUpdate = false;
            }
        }
    }

    [JSInvokable]
    public async Task OnTextChanged(string text)
    {
        ShouldUpdate = false;
        await ValueChanged.InvokeAsync(text);
    }

    [Parameter]
    public string Placeholder { get; set; } = default!;

    [Parameter]
    public bool Readonly { get; set; } = false;

    [Parameter]
    public string Value { get; set; } = default!;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private bool ShouldUpdate = true;
}