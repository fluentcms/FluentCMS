@inherits BaseAppComponent

<div class="f-section f-section-@Name">
    @if (AppState.Page?.Plugins != null)
    {
        @foreach (var plugin in GetPlugins())
        {
            <PluginContainer Plugin=@plugin>
                <DynamicComponent Type=@GetType(plugin) Parameters=@GetParameters(plugin) />
            </PluginContainer>
        }
    }
</div>

@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;

    private Dictionary<string, object> GetParameters(PluginResponse plugin)
    {
        return new Dictionary<string, object>
        {
            { "Plugin", plugin }
        };
    }

    private Type? GetType(PluginResponse plugin)
    {
        var assembly = typeof(Section).Assembly;

        if (AppState.ViewMode?.ToLower() == "edit")
            return assembly.DefinedTypes.FirstOrDefault(x => x.Name == plugin.Definition.EditType);

        return assembly.DefinedTypes.FirstOrDefault(x => x.Name == plugin.Definition.ViewType);
    }

    private List<PluginResponse> GetPlugins()
    {
        if (AppState.Page?.Plugins == null)
            return [];

        var result = AppState.Page.Plugins.Where(x =>
            x.Section.Equals(Name, StringComparison.CurrentCultureIgnoreCase));

        result = result.Where(x => AppState.PluginId == null || x.Id == AppState.PluginId);

        return result.OrderBy(x => x.Order).ToList();
    }
}
